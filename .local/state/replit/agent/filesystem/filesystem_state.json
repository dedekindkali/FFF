{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack event management application for FroForForno, designed for a three-day conference (August 28-30, 2024). The application enables attendees to register their attendance for various meal periods and overnight stays across the conference days, manage dietary preferences, handle transportation coordination, and includes administrative features for event organizers.\n\nThe system features a modern React frontend with shadcn/ui components and a Node.js/Express backend, using PostgreSQL with Drizzle ORM for data persistence. The application supports both regular attendees and administrators, with role-based access control for management features.\n\n## Recent Updates (August 2025)\n- **Design System Overhaul**: Implemented striking black and flashing pink color palette with proper typography hierarchy\n- **Typography Enhancement**: Hours font for main titles/account names, Montserrat Light for regular text, Montserrat Medium for secondary titles\n- **Delete Functionality**: Added ability to delete both ride offers and ride requests with proper authorization\n- **Participants List Fix**: Resolved display issues with participants list showing properly\n- **Italian Localization**: Extended Italian translations to include attendance details and new UI features\n- **Scrollable UI**: Made panels and pop-ups scrollable when content exceeds screen size\n- **Interactive Ride System**: Enhanced ride coordination with notifications and modification capabilities\n- **Separate Admin System**: Implemented completely independent admin authentication and interface\n- **Admin User Management**: Fixed admin user deletion with comprehensive foreign key handling\n- **Streamlined Admin Access**: Admin login now requires only password, goes directly to admin panel\n- **Simplified Signup**: Removed email field from signup form for streamlined user registration\n- **Typography System**: Implemented Hours font for page titles and usernames, Montserrat for other text elements\n- **UI Refinements**: Removed main title from header, cleaned up navigation menu, removed text from ride action buttons\n- **Dashboard Redesign**: Updated detail panels with pink-black gradient styling and proper font hierarchy\n- **Authentication UX**: Removed main title, formatted subtitle on two lines for better visual impact\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens for theming\n- **State Management**: TanStack React Query for server state management\n- **Client-side Routing**: Single-page application with programmatic navigation\n- **Theme Support**: Dark/light mode toggle with system preference detection\n\nThe frontend follows a component-based architecture with reusable UI components and page-level components for different views (Dashboard, Attendance, Participants, Admin). The application uses a custom query client wrapper for API communication with built-in error handling and authentication flow.\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured endpoint organization\n- **Session Management**: Express sessions for user authentication\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n- **Development Tools**: Hot reloading with Vite integration in development mode\n\nThe backend implements a clean separation of concerns with dedicated modules for database operations (storage layer), route handling, and database configuration. The API supports authentication, attendance management, user management, and administrative functions.\n\n## Data Storage Solutions\n- **Database**: PostgreSQL as the primary database\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Connection**: Neon serverless PostgreSQL with connection pooling\n- **Migrations**: Drizzle Kit for schema migrations and management\n- **Schema Design**: Relational design with users and attendance records tables\n\nThe database schema includes a users table for basic user information and role management, and an attendance_records table tracking detailed attendance for each day's meals and overnight stays, plus dietary preferences and transportation details.\n\n## Authentication and Authorization\n- **Session-based Authentication**: Server-side sessions with Express\n- **User Creation**: Automatic user creation on first login with username\n- **Role-based Access**: Admin flag in user records for administrative features\n- **Session Persistence**: Session data stored server-side with secure configuration\n- **Protected Routes**: Middleware-based protection for authenticated endpoints\n\nThe authentication system uses a simple username-based login with automatic account creation, making it easy for attendees to access the system while maintaining security through server-side session management.\n\n## Ride Coordination System\n- **Comprehensive Tab Structure**: Available Rides, Ride Requests, Join Requests (for drivers), My Requests (for passengers)\n- **Real-time Updates**: Join request notifications for both drivers and passengers\n- **Interactive Matching**: Direct ride offering from ride requests with automated route matching\n- **Status Tracking**: Complete visibility of join request status with response timestamps\n- **User Experience**: Seamless flow from attendance form to dashboard with improved navigation\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with WebSocket support for real-time connections\n- **Connection Pooling**: Neon's connection pooling for efficient database resource management\n\n## UI and Styling\n- **Radix UI**: Comprehensive set of accessible, unstyled UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for rapid styling\n- **Lucide React**: Icon library providing consistent iconography\n- **shadcn/ui**: Pre-built component library combining Radix UI with Tailwind styling\n\n## Development and Build Tools\n- **Vite**: Fast build tool and development server with HMR support\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Tailwind CSS integration\n\n## Additional Libraries\n- **TanStack React Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form handling with validation support\n- **Zod**: Runtime type validation and schema validation\n- **date-fns**: Date manipulation and formatting utilities\n- **clsx/class-variance-authority**: Utility libraries for conditional styling","size_bytes":6820},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'event-manager-secret-key',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2386},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertAttendanceSchema, updateAttendanceSchema, insertRideSchema, insertRideRequestSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username } = req.body;\n      \n      if (!username) {\n        return res.status(400).json({ message: \"Username is required\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      (req as any).session.userId = user.id;\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      if (!userData.username) {\n        return res.status(400).json({ message: \"Username is required\" });\n      }\n\n      const existingUser = await storage.getUserByUsername(userData.username);\n      \n      if (existingUser) {\n        return res.status(409).json({ message: \"Username already exists\" });\n      }\n\n      const user = await storage.createUser(userData);\n      (req as any).session.userId = user.id;\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    (req as any).session.destroy((err: any) => {\n      if (err) {\n        res.status(500).json({ message: \"Could not log out\" });\n      } else {\n        res.json({ message: \"Logged out successfully\" });\n      }\n    });\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin authentication route\n  app.post(\"/api/admin/auth\", async (req, res) => {\n    try {\n      const { password } = req.body;\n      \n      if (!password) {\n        return res.status(400).json({ message: \"Password is required\" });\n      }\n\n      // Check if the password matches the admin password\n      if (password === \"Autarch3i@\") {\n        (req as any).session.adminAuthenticated = true;\n        (req as any).session.isAdmin = true;\n        res.json({ message: \"Admin access granted\" });\n      } else {\n        res.status(401).json({ message: \"Invalid admin password\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Attendance routes\n  app.get(\"/api/attendance\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const attendance = await storage.getAttendanceByUserId(userId);\n      res.json({ attendance });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/attendance\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const attendanceData = insertAttendanceSchema.parse({ ...req.body, userId });\n      \n      // Check if attendance record already exists\n      const existingAttendance = await storage.getAttendanceByUserId(userId);\n      \n      let attendance;\n      if (existingAttendance) {\n        attendance = await storage.updateAttendance({ ...attendanceData, userId });\n      } else {\n        attendance = await storage.createAttendance(attendanceData);\n      }\n      \n      res.json({ attendance });\n    } catch (error) {\n      console.error('Attendance error:', error);\n      res.status(400).json({ message: \"Invalid attendance data\" });\n    }\n  });\n\n  // Participants routes\n  app.get(\"/api/participants\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const participants = await storage.getAllUsersWithAttendance();\n      res.json({ participants });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin authentication\n  app.post(\"/api/admin/auth\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const { password } = req.body;\n      if (password !== \"Autarch3i@\") {\n        return res.status(403).json({ message: \"Invalid admin password\" });\n      }\n\n      // Set admin access in session\n      (req as any).session.isAdminAuthenticated = true;\n      res.json({ message: \"Admin access granted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // User profile routes\n  app.get(\"/api/users/:userId\", async (req, res) => {\n    const currentUserId = (req as any).session?.userId;\n    if (!currentUserId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const userId = parseInt(req.params.userId);\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/attendance\", async (req, res) => {\n    const currentUserId = (req as any).session?.userId;\n    if (!currentUserId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const userId = parseInt(req.params.userId);\n      const attendance = await storage.getAttendanceByUserId(userId);\n      \n      res.json({ attendance });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Enhanced ride system routes\n  app.put(\"/api/rides/:rideId\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const rideId = parseInt(req.params.rideId);\n      const ride = await storage.getRide(rideId);\n      \n      if (!ride || ride.driverId !== userId) {\n        return res.status(403).json({ message: \"Not authorized to modify this ride\" });\n      }\n\n      const updates = req.body;\n      await storage.updateRide(rideId, updates);\n\n      // Notify all passengers about the modification\n      const joinRequests = await storage.getRideJoinRequestsForDriver(userId);\n      const acceptedPassengers = joinRequests.filter(jr => jr.rideId === rideId && jr.status === 'accepted');\n      \n      for (const passenger of acceptedPassengers) {\n        await storage.createRideNotification({\n          userId: passenger.requesterId,\n          rideId: rideId,\n          type: 'ride_modified',\n          message: 'A ride you joined has been modified. Please check the updated details.',\n        });\n      }\n\n      res.json({ message: \"Ride updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating ride:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/notifications\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const notifications = await storage.getRideNotifications(userId);\n      res.json({ notifications });\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/stats\", async (req, res) => {\n    const adminAuthenticated = (req as any).session?.adminAuthenticated;\n    \n    if (!adminAuthenticated) {\n      return res.status(403).json({ message: \"Admin password required\" });\n    }\n\n    try {\n      const stats = await storage.getAttendanceStats();\n      res.json({ stats });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", async (req, res) => {\n    const adminAuthenticated = (req as any).session?.adminAuthenticated;\n    \n    if (!adminAuthenticated) {\n      return res.status(403).json({ message: \"Admin password required\" });\n    }\n\n    try {\n      const users = await storage.getAllUsersWithAttendance();\n      res.json({ users });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", async (req, res) => {\n    const adminAuthenticated = (req as any).session?.adminAuthenticated;\n    \n    if (!adminAuthenticated) {\n      return res.status(403).json({ message: \"Admin password required\" });\n    }\n\n    try {\n      const userIdToDelete = parseInt(req.params.id);\n      if (isNaN(userIdToDelete)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n\n      await storage.deleteUser(userIdToDelete);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/admin/export/:type\", async (req, res) => {\n    const adminAuthenticated = (req as any).session?.adminAuthenticated;\n    \n    if (!adminAuthenticated) {\n      return res.status(403).json({ message: \"Admin password required\" });\n    }\n\n    try {\n\n      const { type } = req.params;\n      const participants = await storage.getAllUsersWithAttendance();\n      \n      // Simple CSV export\n      let csvData = '';\n      \n      if (type === 'attendance') {\n        csvData = 'Username,Day1 Breakfast,Day1 Lunch,Day1 Dinner,Day1 Night,Day2 Breakfast,Day2 Lunch,Day2 Dinner,Day2 Night,Day3 Breakfast,Day3 Lunch,Day3 Dinner,Day3 Night\\n';\n        participants.forEach(p => {\n          if (p.attendance) {\n            csvData += `${p.username},${p.attendance.day1Breakfast},${p.attendance.day1Lunch},${p.attendance.day1Dinner},${p.attendance.day1Night},${p.attendance.day2Breakfast},${p.attendance.day2Lunch},${p.attendance.day2Dinner},${p.attendance.day2Night},${p.attendance.day3Breakfast},${p.attendance.day3Lunch},${p.attendance.day3Dinner},${p.attendance.day3Night}\\n`;\n          }\n        });\n      } else if (type === 'rides') {\n        csvData = 'Username,Transportation Status,Transportation Details\\n';\n        participants.forEach(p => {\n          if (p.attendance) {\n            csvData += `${p.username},${p.attendance.transportationStatus || ''},${p.attendance.transportationDetails || ''}\\n`;\n          }\n        });\n      } else if (type === 'dietary') {\n        csvData = 'Username,Vegetarian,Vegan,Gluten Free,Dairy Free,Allergies\\n';\n        participants.forEach(p => {\n          if (p.attendance) {\n            csvData += `${p.username},${p.attendance.vegetarian},${p.attendance.vegan},${p.attendance.glutenFree},${p.attendance.dairyFree},${p.attendance.allergies || ''}\\n`;\n          }\n        });\n      }\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${type}-export.csv\"`);\n      res.send(csvData);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Ride routes\n  app.get(\"/api/rides\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const rides = await storage.getAllRides();\n      res.json({ rides });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/rides\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const rideData = insertRideSchema.parse({\n        ...req.body,\n        driverId: userId,\n      });\n      \n      const ride = await storage.createRide(rideData);\n      res.json({ ride });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid ride data\" });\n    }\n  });\n\n  // New ride join request system\n  app.post(\"/api/rides/:id/request-join\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const rideId = parseInt(req.params.id);\n      const { message } = req.body;\n\n      const ride = await storage.getRide(rideId);\n      if (!ride) {\n        return res.status(404).json({ message: \"Ride not found\" });\n      }\n\n      if (ride.driverId === userId) {\n        return res.status(400).json({ message: \"Cannot request to join your own ride\" });\n      }\n\n      const joinRequest = await storage.createRideJoinRequest({\n        rideId,\n        requesterId: userId,\n        message: message || \"\"\n      });\n\n      res.json({ joinRequest });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/rides/join-requests\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const requests = await storage.getRideJoinRequestsForDriver(userId);\n      res.json({ requests });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/ride-join-status\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const joinRequests = await storage.getRideJoinRequestsForUser(userId);\n      res.json({ joinRequests });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/rides/join-requests/:id/respond\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const requestId = parseInt(req.params.id);\n      const { status } = req.body;\n\n      if (!['accepted', 'declined'].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      await storage.respondToRideJoinRequest(requestId, status, userId);\n      res.json({ message: `Request ${status}` });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Ride request routes\n  app.get(\"/api/ride-requests\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const requests = await storage.getAllRideRequests();\n      res.json({ requests });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/ride-requests\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const requestData = insertRideRequestSchema.parse({\n        ...req.body,\n        requesterId: userId,\n      });\n      \n      const request = await storage.createRideRequest(requestData);\n      res.json({ request });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  // Delete ride routes\n  app.delete(\"/api/rides/:rideId\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const rideId = parseInt(req.params.rideId);\n      const ride = await storage.getRide(rideId);\n      \n      if (!ride || ride.driverId !== userId) {\n        return res.status(403).json({ message: \"Not authorized to delete this ride\" });\n      }\n\n      await storage.deleteRide(rideId);\n      res.json({ message: \"Ride deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting ride:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Delete ride request routes\n  app.delete(\"/api/ride-requests/:requestId\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const requestId = parseInt(req.params.requestId);\n      const request = await storage.getRideRequest(requestId);\n      \n      if (!request || request.requesterId !== userId) {\n        return res.status(403).json({ message: \"Not authorized to delete this request\" });\n      }\n\n      await storage.deleteRideRequest(requestId);\n      res.json({ message: \"Ride request deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting ride request:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Invite user to specific ride\n  app.post(\"/api/rides/:rideId/invite\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const rideId = parseInt(req.params.rideId);\n      const { userId: invitedUserId, message } = req.body;\n\n      const ride = await storage.getRide(rideId);\n      if (!ride || ride.driverId !== userId) {\n        return res.status(403).json({ message: \"Not authorized to invite to this ride\" });\n      }\n\n      // Create a ride invitation for the passenger\n      const invitation = await storage.createRideInvitation({\n        rideId,\n        inviterId: userId,\n        inviteeId: invitedUserId,\n      });\n\n      // Create notification for the invited user (passenger)\n      const driver = await storage.getUserById(userId);\n      await storage.createRideNotification({\n        userId: invitedUserId,\n        type: 'ride_invitation',\n        message: `${driver?.username || 'A driver'} offered you a ride from ${ride.departure} to ${ride.destination}`,\n      });\n\n      res.json({ message: \"Ride offer sent successfully\", invitation });\n    } catch (error) {\n      console.error(\"Error sending ride invitation:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update ride request status\n  app.put(\"/api/ride-requests/:requestId\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const requestId = parseInt(req.params.requestId);\n      const { status } = req.body;\n\n      const request = await storage.getRideRequest(requestId);\n      if (!request) {\n        return res.status(404).json({ message: \"Ride request not found\" });\n      }\n\n      await storage.updateRideRequestStatus(requestId, status);\n      res.json({ message: \"Ride request updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating ride request:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get ride invitations for user\n  app.get(\"/api/ride-invitations\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const invitations = await storage.getRideInvitations(userId);\n      res.json({ invitations });\n    } catch (error) {\n      console.error(\"Error getting ride invitations:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Respond to ride invitation\n  app.put(\"/api/ride-invitations/:invitationId/respond\", async (req, res) => {\n    const userId = (req as any).session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const invitationId = parseInt(req.params.invitationId);\n      const { status } = req.body; // 'accepted' or 'declined'\n\n      // Verify the invitation exists and belongs to the user\n      const invitations = await storage.getRideInvitations(userId);\n      const invitation = invitations.find(inv => inv.id === invitationId);\n      \n      if (!invitation) {\n        return res.status(404).json({ message: \"Invitation not found\" });\n      }\n\n      await storage.respondToRideInvitation(invitationId, status);\n\n      // Clear related notifications\n      await storage.clearNotificationsForInvitation(invitationId);\n\n      // If accepted, add user to the ride (create join request)\n      if (status === 'accepted') {\n        await storage.createRideJoinRequest({\n          rideId: invitation.rideId,\n          requesterId: userId,\n          message: \"Accepted ride invitation\",\n        });\n\n        // Update ride available seats\n        const ride = await storage.getRide(invitation.rideId);\n        if (ride && ride.availableSeats > 0) {\n          await storage.updateRideSeats(invitation.rideId, ride.availableSeats - 1);\n        }\n      }\n\n      res.json({ message: `Invitation ${status} successfully` });\n    } catch (error) {\n      console.error(\"Error responding to ride invitation:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":22118},"server/storage.ts":{"content":"import { users, attendanceRecords, rides, rideRequests, rideJoinRequests, rideNotifications, rideInvitations, type User, type InsertUser, type AttendanceRecord, type InsertAttendance, type UpdateAttendance, type Ride, type InsertRide, type RideRequest, type InsertRideRequest, type RideJoinRequest, type InsertRideJoinRequest, type RideNotification, type InsertRideNotification, type RideInvitation, type InsertRideInvitation } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserById(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Attendance methods\n  getAttendanceByUserId(userId: number): Promise<AttendanceRecord | undefined>;\n  createAttendance(attendance: InsertAttendance): Promise<AttendanceRecord>;\n  updateAttendance(attendance: UpdateAttendance): Promise<AttendanceRecord>;\n  \n  // Ride methods\n  createRide(ride: InsertRide): Promise<Ride>;\n  getAllRides(): Promise<Array<Ride & { driver: User }>>;\n  getRidesByDriverId(driverId: number): Promise<Ride[]>;\n  getRide(rideId: number): Promise<Ride | undefined>;\n  updateRideSeats(rideId: number, availableSeats: number): Promise<void>;\n  updateRide(rideId: number, updates: Partial<InsertRide>): Promise<void>;\n  deleteRide(rideId: number): Promise<void>;\n  \n  // Ride request methods\n  createRideRequest(request: InsertRideRequest): Promise<RideRequest>;\n  getAllRideRequests(): Promise<Array<RideRequest & { requester: User }>>;\n  getRideRequestsByUserId(userId: number): Promise<RideRequest[]>;\n  getRideRequest(requestId: number): Promise<RideRequest | undefined>;\n  updateRideRequestStatus(requestId: number, status: string, rideId?: number): Promise<void>;\n  \n  // Ride join request methods\n  createRideJoinRequest(request: InsertRideJoinRequest): Promise<RideJoinRequest>;\n  getRideJoinRequestsForDriver(driverId: number): Promise<Array<RideJoinRequest & { requester: User; ride: Ride }>>;\n  getRideJoinRequestsForUser(userId: number): Promise<Array<RideJoinRequest & { ride: Ride & { driver: User } }>>;\n  respondToRideJoinRequest(requestId: number, status: string, driverId: number): Promise<void>;\n  \n  // Notification methods\n  createRideNotification(notification: InsertRideNotification): Promise<RideNotification>;\n  getRideNotifications(userId: number): Promise<RideNotification[]>;\n  markNotificationAsRead(notificationId: number): Promise<void>;\n  \n  // Invitation methods\n  createRideInvitation(invitation: InsertRideInvitation): Promise<RideInvitation>;\n  getRideInvitations(userId: number): Promise<Array<RideInvitation & { ride: Ride & { driver: User }; inviter: User }>>;\n  respondToRideInvitation(invitationId: number, status: string): Promise<void>;\n  clearNotificationsForInvitation(invitationId: number): Promise<void>;\n  \n  // Admin methods\n  deleteUser(userId: number): Promise<void>;\n  \n  // Get user stats methods  \n  getAllUsersWithAttendance(): Promise<Array<User & { attendance?: AttendanceRecord }>>;\n  getAttendanceStats(): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserById(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getAttendanceByUserId(userId: number): Promise<AttendanceRecord | undefined> {\n    const [attendance] = await db\n      .select()\n      .from(attendanceRecords)\n      .where(eq(attendanceRecords.userId, userId));\n    return attendance || undefined;\n  }\n\n  async createAttendance(attendance: InsertAttendance): Promise<AttendanceRecord> {\n    const [newAttendance] = await db\n      .insert(attendanceRecords)\n      .values(attendance)\n      .returning();\n    return newAttendance;\n  }\n\n  async updateAttendance(attendance: UpdateAttendance): Promise<AttendanceRecord> {\n    const [updatedAttendance] = await db\n      .update(attendanceRecords)\n      .set({\n        ...attendance,\n        updatedAt: new Date(),\n      })\n      .where(eq(attendanceRecords.userId, attendance.userId!))\n      .returning();\n    return updatedAttendance;\n  }\n\n  // Ride methods\n  async createRide(ride: InsertRide): Promise<Ride> {\n    const [newRide] = await db\n      .insert(rides)\n      .values(ride)\n      .returning();\n    return newRide;\n  }\n\n  async getAllRides(): Promise<Array<Ride & { driver: User; passengers: User[] }>> {\n    const result = await db\n      .select()\n      .from(rides)\n      .innerJoin(users, eq(rides.driverId, users.id))\n      .where(eq(rides.isActive, true))\n      .orderBy(desc(rides.createdAt));\n\n    const ridesWithDriver = result.map(row => ({\n      ...row.rides,\n      driver: row.users,\n    }));\n\n    // Get passengers for each ride (accepted join requests)\n    const ridesWithPassengers = await Promise.all(\n      ridesWithDriver.map(async (ride) => {\n        const passengers = await db\n          .select({\n            id: users.id,\n            username: users.username,\n            email: users.email,\n            phone: users.phone,\n            isAdmin: users.isAdmin,\n            createdAt: users.createdAt,\n          })\n          .from(rideJoinRequests)\n          .innerJoin(users, eq(rideJoinRequests.requesterId, users.id))\n          .where(\n            and(\n              eq(rideJoinRequests.rideId, ride.id),\n              eq(rideJoinRequests.status, 'accepted')\n            )\n          );\n\n        return {\n          ...ride,\n          passengers,\n        };\n      })\n    );\n\n    return ridesWithPassengers;\n  }\n\n  async getRidesByDriverId(driverId: number): Promise<Ride[]> {\n    return await db\n      .select()\n      .from(rides)\n      .where(eq(rides.driverId, driverId))\n      .orderBy(desc(rides.createdAt));\n  }\n\n  async getRide(rideId: number): Promise<Ride | undefined> {\n    const [ride] = await db.select().from(rides).where(eq(rides.id, rideId));\n    return ride || undefined;\n  }\n\n  async updateRideSeats(rideId: number, availableSeats: number): Promise<void> {\n    await db\n      .update(rides)\n      .set({ availableSeats })\n      .where(eq(rides.id, rideId));\n  }\n\n  async updateRide(rideId: number, updates: Partial<InsertRide>): Promise<void> {\n    await db\n      .update(rides)\n      .set(updates)\n      .where(eq(rides.id, rideId));\n  }\n\n  async deleteRide(rideId: number): Promise<void> {\n    await db\n      .delete(rides)\n      .where(eq(rides.id, rideId));\n  }\n\n  // Ride request methods\n  async createRideRequest(request: InsertRideRequest): Promise<RideRequest> {\n    const [newRequest] = await db\n      .insert(rideRequests)\n      .values(request)\n      .returning();\n    return newRequest;\n  }\n\n  async getAllRideRequests(): Promise<Array<RideRequest & { requester: User }>> {\n    const result = await db\n      .select()\n      .from(rideRequests)\n      .innerJoin(users, eq(rideRequests.requesterId, users.id))\n      .orderBy(desc(rideRequests.createdAt));\n\n    return result.map(row => ({\n      ...row.ride_requests,\n      requester: row.users,\n    }));\n  }\n\n  async getRideRequestsByUserId(userId: number): Promise<RideRequest[]> {\n    return await db\n      .select()\n      .from(rideRequests)\n      .where(eq(rideRequests.requesterId, userId))\n      .orderBy(desc(rideRequests.createdAt));\n  }\n\n  async updateRideRequestStatus(requestId: number, status: string, rideId?: number): Promise<void> {\n    const updateData: any = { status };\n    if (rideId) {\n      updateData.rideId = rideId;\n    }\n    \n    await db\n      .update(rideRequests)\n      .set(updateData)\n      .where(eq(rideRequests.id, requestId));\n  }\n\n  // Ride join request methods\n  async createRideJoinRequest(request: InsertRideJoinRequest): Promise<RideJoinRequest> {\n    const [newRequest] = await db\n      .insert(rideJoinRequests)\n      .values(request)\n      .returning();\n    return newRequest;\n  }\n\n  async getRideJoinRequestsForDriver(driverId: number): Promise<Array<RideJoinRequest & { requester: User; ride: Ride }>> {\n    const result = await db\n      .select()\n      .from(rideJoinRequests)\n      .innerJoin(rides, eq(rideJoinRequests.rideId, rides.id))\n      .innerJoin(users, eq(rideJoinRequests.requesterId, users.id))\n      .where(eq(rides.driverId, driverId))\n      .orderBy(desc(rideJoinRequests.createdAt));\n\n    return result.map(row => ({\n      ...row.ride_join_requests,\n      requester: row.users,\n      ride: row.rides,\n    }));\n  }\n\n  async respondToRideJoinRequest(requestId: number, status: string, driverId: number): Promise<void> {\n    // First verify the driver owns the ride\n    const joinRequest = await db\n      .select()\n      .from(rideJoinRequests)\n      .innerJoin(rides, eq(rideJoinRequests.rideId, rides.id))\n      .where(eq(rideJoinRequests.id, requestId))\n      .limit(1);\n\n    if (!joinRequest.length || joinRequest[0].rides.driverId !== driverId) {\n      throw new Error(\"Unauthorized to respond to this request\");\n    }\n\n    await db\n      .update(rideJoinRequests)\n      .set({ \n        status, \n        respondedAt: new Date() \n      })\n      .where(eq(rideJoinRequests.id, requestId));\n\n    // If accepted, reduce available seats\n    if (status === 'accepted') {\n      const ride = joinRequest[0].rides;\n      if (ride.availableSeats > 0) {\n        await this.updateRideSeats(ride.id, ride.availableSeats - 1);\n      }\n    }\n  }\n\n  async getRideJoinRequestsForUser(userId: number): Promise<Array<RideJoinRequest & { ride: Ride & { driver: User } }>> {\n    const result = await db\n      .select()\n      .from(rideJoinRequests)\n      .innerJoin(rides, eq(rideJoinRequests.rideId, rides.id))\n      .innerJoin(users, eq(rides.driverId, users.id))\n      .where(eq(rideJoinRequests.requesterId, userId))\n      .orderBy(desc(rideJoinRequests.createdAt));\n\n    return result.map(row => ({\n      ...row.ride_join_requests,\n      ride: {\n        ...row.rides,\n        driver: row.users,\n      },\n    }));\n  }\n\n  // Notification methods\n  async createRideNotification(notification: InsertRideNotification): Promise<RideNotification> {\n    const [newNotification] = await db\n      .insert(rideNotifications)\n      .values(notification)\n      .returning();\n    return newNotification;\n  }\n\n  async getRideNotifications(userId: number): Promise<RideNotification[]> {\n    return await db\n      .select()\n      .from(rideNotifications)\n      .where(eq(rideNotifications.userId, userId))\n      .orderBy(desc(rideNotifications.createdAt));\n  }\n\n  async markNotificationAsRead(notificationId: number): Promise<void> {\n    await db\n      .update(rideNotifications)\n      .set({ isRead: true })\n      .where(eq(rideNotifications.id, notificationId));\n  }\n\n  // Invitation methods\n  async createRideInvitation(invitation: InsertRideInvitation): Promise<RideInvitation> {\n    const [newInvitation] = await db\n      .insert(rideInvitations)\n      .values(invitation)\n      .returning();\n    return newInvitation;\n  }\n\n  async getRideInvitations(userId: number): Promise<Array<RideInvitation & { ride: Ride & { driver: User }; inviter: User }>> {\n    // Get invitations with ride data and driver info\n    const invitationsWithRides = await db\n      .select({\n        invitation: rideInvitations,\n        ride: rides,\n        driver: users,\n      })\n      .from(rideInvitations)\n      .innerJoin(rides, eq(rideInvitations.rideId, rides.id))\n      .innerJoin(users, eq(rides.driverId, users.id))\n      .where(eq(rideInvitations.inviteeId, userId))\n      .orderBy(desc(rideInvitations.createdAt));\n\n    // Get inviter information separately\n    const result = await Promise.all(\n      invitationsWithRides.map(async (row) => {\n        const [inviter] = await db\n          .select()\n          .from(users)\n          .where(eq(users.id, row.invitation.inviterId));\n\n        return {\n          ...row.invitation,\n          ride: {\n            ...row.ride,\n            driver: row.driver,\n          },\n          inviter: inviter || row.driver, // Fallback to driver if inviter not found\n        };\n      })\n    );\n\n    return result;\n  }\n\n  async respondToRideInvitation(invitationId: number, status: string): Promise<void> {\n    await db\n      .update(rideInvitations)  \n      .set({ \n        status,\n        respondedAt: new Date()\n      })\n      .where(eq(rideInvitations.id, invitationId));\n  }\n\n  async clearNotificationsForInvitation(invitationId: number): Promise<void> {\n    // Get the invitation details to find related notifications\n    const [invitation] = await db\n      .select()\n      .from(rideInvitations)\n      .where(eq(rideInvitations.id, invitationId));\n    \n    if (invitation) {\n      // Clear notifications related to this ride invitation (ride offers)\n      await db\n        .delete(rideNotifications)\n        .where(\n          and(\n            eq(rideNotifications.userId, invitation.inviteeId),\n            eq(rideNotifications.rideId, invitation.rideId),\n            eq(rideNotifications.type, 'ride_offer')\n          )\n        );\n    }\n  }\n\n  // Admin methods\n  async deleteUser(userId: number): Promise<void> {\n    // Delete related records first due to foreign key constraints\n    // Order matters - delete child records before parent records\n    \n    // First, get the user's ride requests to delete related notifications\n    const userRideRequests = await db\n      .select({ id: rideRequests.id })\n      .from(rideRequests)\n      .where(eq(rideRequests.requesterId, userId));\n    \n    // Delete notifications that reference the user's ride requests\n    for (const request of userRideRequests) {\n      await db.delete(rideNotifications).where(eq(rideNotifications.requestId, request.id));\n    }\n    \n    // Delete notifications related to the user\n    await db.delete(rideNotifications).where(eq(rideNotifications.userId, userId));\n    \n    // Delete ride invitations (both as inviter and invitee)\n    await db.delete(rideInvitations).where(eq(rideInvitations.inviterId, userId));\n    await db.delete(rideInvitations).where(eq(rideInvitations.inviteeId, userId));\n    \n    // Delete join requests\n    await db.delete(rideJoinRequests).where(eq(rideJoinRequests.requesterId, userId));\n    \n    // Delete ride requests\n    await db.delete(rideRequests).where(eq(rideRequests.requesterId, userId));\n    \n    // Delete rides where user is the driver\n    await db.delete(rides).where(eq(rides.driverId, userId));\n    \n    // Delete attendance records\n    await db.delete(attendanceRecords).where(eq(attendanceRecords.userId, userId));\n    \n    // Finally delete the user\n    await db.delete(users).where(eq(users.id, userId));\n  }\n\n  async getAllUsersWithAttendance(): Promise<Array<User & { attendance?: AttendanceRecord }>> {\n    const result = await db\n      .select()\n      .from(users)\n      .leftJoin(attendanceRecords, eq(users.id, attendanceRecords.userId));\n\n    return result.map(row => ({\n      ...row.users,\n      attendance: row.attendance_records || undefined,\n    }));\n  }\n\n  async getAttendanceStats(): Promise<any> {\n    const allAttendance = await db.select().from(attendanceRecords);\n    \n    const stats = {\n      totalParticipants: allAttendance.length,\n      day1: {\n        breakfast: allAttendance.filter(a => a.day1Breakfast).length,\n        lunch: allAttendance.filter(a => a.day1Lunch).length,\n        dinner: allAttendance.filter(a => a.day1Dinner).length,\n        night: allAttendance.filter(a => a.day1Night).length,\n      },\n      day2: {\n        breakfast: allAttendance.filter(a => a.day2Breakfast).length,\n        lunch: allAttendance.filter(a => a.day2Lunch).length,\n        dinner: allAttendance.filter(a => a.day2Dinner).length,\n        night: allAttendance.filter(a => a.day2Night).length,\n      },\n      day3: {\n        breakfast: allAttendance.filter(a => a.day3Breakfast).length,\n        lunch: allAttendance.filter(a => a.day3Lunch).length,\n        dinner: allAttendance.filter(a => a.day3Dinner).length,\n        night: allAttendance.filter(a => a.day3Night).length,\n      },\n      transportation: {\n        offering: allAttendance.filter(a => a.transportationStatus === 'offering').length,\n        needed: allAttendance.filter(a => a.transportationStatus === 'needed').length,\n        own: allAttendance.filter(a => a.transportationStatus === 'own').length,\n      },\n      dietary: {\n        vegetarian: allAttendance.filter(a => a.vegetarian).length,\n        vegan: allAttendance.filter(a => a.vegan).length,\n        glutenFree: allAttendance.filter(a => a.glutenFree).length,\n        dairyFree: allAttendance.filter(a => a.dairyFree).length,\n        withAllergies: allAttendance.filter(a => a.allergies && a.allergies.trim().length > 0).length,\n      }\n    };\n\n    return stats;\n  }\n\n  async deleteRideRequest(requestId: number): Promise<void> {\n    await db\n      .delete(rideRequests)\n      .where(eq(rideRequests.id, requestId));\n  }\n\n  async getRideRequest(requestId: number): Promise<RideRequest | undefined> {\n    const [request] = await db\n      .select()\n      .from(rideRequests)\n      .where(eq(rideRequests.id, requestId));\n    return request || undefined;\n  }\n\n\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":17693},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, json, timestamp, serial, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 255 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }),\n  phone: varchar(\"phone\", { length: 50 }),\n  isAdmin: boolean(\"is_admin\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`).notNull(),\n});\n\nexport const attendanceRecords = pgTable(\"attendance_records\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  // Day 1 - August 28, 2025\n  day1Breakfast: boolean(\"day1_breakfast\").default(false).notNull(),\n  day1Lunch: boolean(\"day1_lunch\").default(false).notNull(),\n  day1Dinner: boolean(\"day1_dinner\").default(false).notNull(),\n  day1Night: boolean(\"day1_night\").default(false).notNull(),\n  // Day 2 - August 29, 2025\n  day2Breakfast: boolean(\"day2_breakfast\").default(false).notNull(),\n  day2Lunch: boolean(\"day2_lunch\").default(false).notNull(),\n  day2Dinner: boolean(\"day2_dinner\").default(false).notNull(),\n  day2Night: boolean(\"day2_night\").default(false).notNull(),\n  // Day 3 - August 30, 2025\n  day3Breakfast: boolean(\"day3_breakfast\").default(false).notNull(),\n  day3Lunch: boolean(\"day3_lunch\").default(false).notNull(),\n  day3Dinner: boolean(\"day3_dinner\").default(false).notNull(),\n  day3Night: boolean(\"day3_night\").default(false).notNull(),\n  // Transportation\n  transportationStatus: varchar(\"transportation_status\", { length: 50 }), // 'offering', 'needed', 'own'\n  transportationDetails: text(\"transportation_details\"),\n  // Dietary preferences\n  omnivore: boolean(\"omnivore\").default(false).notNull(),\n  vegetarian: boolean(\"vegetarian\").default(false).notNull(),\n  vegan: boolean(\"vegan\").default(false).notNull(),\n  glutenFree: boolean(\"gluten_free\").default(false).notNull(),\n  dairyFree: boolean(\"dairy_free\").default(false).notNull(),\n  allergies: text(\"allergies\"),\n  // Additional notes\n  notes: text(\"notes\"),\n  updatedAt: timestamp(\"updated_at\").default(sql`NOW()`).notNull(),\n});\n\nexport const rides = pgTable(\"rides\", {\n  id: serial(\"id\").primaryKey(),\n  driverId: integer(\"driver_id\").references(() => users.id).notNull(),\n  departure: varchar(\"departure\", { length: 255 }).notNull(),\n  destination: varchar(\"destination\", { length: 255 }).notNull(),\n  tripType: varchar(\"trip_type\", { length: 20 }).notNull(), // 'arrival' or 'departure'\n  eventDay: varchar(\"event_day\", { length: 20 }).notNull(), // 'day1', 'day2', 'day3'\n  departureTime: varchar(\"departure_time\", { length: 50 }).notNull(),\n  availableSeats: integer(\"available_seats\").notNull(),\n  totalSeats: integer(\"total_seats\").notNull(),\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`).notNull(),\n});\n\nexport const rideRequests = pgTable(\"ride_requests\", {\n  id: serial(\"id\").primaryKey(),\n  requesterId: integer(\"requester_id\").references(() => users.id).notNull(),\n  rideId: integer(\"ride_id\").references(() => rides.id),\n  departure: varchar(\"departure\", { length: 255 }).notNull(),\n  destination: varchar(\"destination\", { length: 255 }).notNull(),\n  tripType: varchar(\"trip_type\", { length: 20 }).notNull(), // 'arrival' or 'departure'\n  eventDay: varchar(\"event_day\", { length: 20 }).notNull(), // 'day1', 'day2', 'day3'\n  preferredTime: varchar(\"preferred_time\", { length: 50 }),\n  notes: text(\"notes\"),\n  status: varchar(\"status\", { length: 20 }).default(\"open\").notNull(), // 'open', 'pending', 'accepted', 'declined'\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`).notNull(),\n});\n\n// New table for ride join requests with notification system\nexport const rideJoinRequests = pgTable(\"ride_join_requests\", {\n  id: serial(\"id\").primaryKey(),\n  rideId: integer(\"ride_id\").references(() => rides.id).notNull(),\n  requesterId: integer(\"requester_id\").references(() => users.id).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\").notNull(), // 'pending', 'accepted', 'declined'\n  message: text(\"message\"),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`).notNull(),\n  respondedAt: timestamp(\"responded_at\"),\n});\n\nexport const rideNotifications = pgTable(\"ride_notifications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  rideId: integer(\"ride_id\").references(() => rides.id),\n  requestId: integer(\"request_id\").references(() => rideRequests.id),\n  type: varchar(\"type\", { length: 50 }).notNull(), // 'ride_modified', 'ride_offer', 'request_accepted', 'request_declined'\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`).notNull(),\n});\n\nexport const rideInvitations = pgTable(\"ride_invitations\", {\n  id: serial(\"id\").primaryKey(),\n  rideId: integer(\"ride_id\").references(() => rides.id).notNull(),\n  inviterId: integer(\"inviter_id\").references(() => users.id).notNull(),\n  inviteeId: integer(\"invitee_id\").references(() => users.id).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\").notNull(), // 'pending', 'accepted', 'declined'\n  createdAt: timestamp(\"created_at\").default(sql`NOW()`).notNull(),\n  respondedAt: timestamp(\"responded_at\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  phone: true,\n}).extend({\n  email: z.string().email().optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendanceRecords).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const updateAttendanceSchema = insertAttendanceSchema.partial().extend({\n  userId: z.number(),\n});\n\nexport const insertRideSchema = createInsertSchema(rides).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRideRequestSchema = createInsertSchema(rideRequests).omit({\n  id: true,\n  createdAt: true,\n  status: true,\n});\n\nexport const insertRideJoinRequestSchema = createInsertSchema(rideJoinRequests).omit({\n  id: true,\n  createdAt: true,\n  respondedAt: true,\n});\n\nexport const insertRideNotificationSchema = createInsertSchema(rideNotifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRideInvitationSchema = createInsertSchema(rideInvitations).omit({\n  id: true,\n  createdAt: true,\n  respondedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type AttendanceRecord = typeof attendanceRecords.$inferSelect;\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\nexport type UpdateAttendance = z.infer<typeof updateAttendanceSchema>;\nexport type Ride = typeof rides.$inferSelect;\nexport type InsertRide = z.infer<typeof insertRideSchema>;\nexport type RideRequest = typeof rideRequests.$inferSelect;\nexport type InsertRideRequest = z.infer<typeof insertRideRequestSchema>;\nexport type RideJoinRequest = typeof rideJoinRequests.$inferSelect;\nexport type InsertRideJoinRequest = z.infer<typeof insertRideJoinRequestSchema>;\nexport type RideNotification = typeof rideNotifications.$inferSelect;\nexport type InsertRideNotification = z.infer<typeof insertRideNotificationSchema>;\nexport type RideInvitation = typeof rideInvitations.$inferSelect;\nexport type InsertRideInvitation = z.infer<typeof insertRideInvitationSchema>;\n","size_bytes":7577},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { LanguageProvider } from \"@/components/language-provider\";\nimport { Navigation } from \"@/components/navigation\";\nimport { Login } from \"@/pages/login\";\nimport { Dashboard } from \"@/pages/dashboard\";\nimport { Attendance } from \"@/pages/attendance\";\nimport { Participants } from \"@/pages/participants\";\nimport { Rides } from \"@/pages/rides\";\nimport { Admin } from \"@/pages/admin\";\nimport { Profile } from \"@/pages/profile\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nfunction AppContent() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isAdminMode, setIsAdminMode] = useState(false);\n  const [currentView, setCurrentView] = useState('dashboard');\n\n  const { data: userData, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/me'],\n    retry: false,\n  });\n\n  useEffect(() => {\n    const user = (userData as any)?.user;\n    if (user) {\n      setIsAuthenticated(true);\n    } else if (error || (!isLoading && !userData)) {\n      setIsAuthenticated(false);\n    }\n  }, [userData, error, isLoading]);\n\n  const handleLogin = () => {\n    setIsAuthenticated(true);\n    setIsAdminMode(false);\n    queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n  };\n\n  const handleAdminLogin = () => {\n    setIsAdminMode(true);\n    setIsAuthenticated(false); // Admin doesn't need regular auth\n  };\n\n  const handleSignUp = () => {\n    setIsAuthenticated(true);\n    setIsAdminMode(false);\n    setCurrentView('attendance'); // Redirect to attendance after signup\n    queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n  };\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    setIsAdminMode(false);\n    setCurrentView('dashboard');\n    queryClient.clear();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600\"></div>\n      </div>\n    );\n  }\n\n  if (isAdminMode) {\n    return <Admin onLogout={handleLogout} />;\n  }\n\n  if (!isAuthenticated) {\n    return <Login onLogin={handleLogin} onSignUp={handleSignUp} onAdminLogin={handleAdminLogin} />;\n  }\n\n  const renderCurrentView = () => {\n    if (currentView.startsWith('profile/')) {\n      const userId = currentView.split('/')[1];\n      return <Profile onNavigate={setCurrentView} userId={userId} />;\n    }\n    \n    switch (currentView) {\n      case 'dashboard':\n        return <Dashboard onNavigate={setCurrentView} />;\n      case 'attendance':\n        return <Attendance onNavigate={setCurrentView} />;\n      case 'participants':\n        return <Participants onNavigate={setCurrentView} />;\n      case 'rides':\n        return <Rides />;\n      case 'admin':\n        return <Admin />;\n      default:\n        return <Dashboard onNavigate={setCurrentView} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Navigation \n        currentView={currentView} \n        onViewChange={setCurrentView}\n        onLogout={handleLogout}\n      />\n      {renderCurrentView()}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\" storageKey=\"froforforno-theme\">\n        <LanguageProvider>\n          <TooltipProvider>\n            <Toaster />\n            <AppContent />\n          </TooltipProvider>\n        </LanguageProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3819},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700;800;900&family=Hours:wght@400;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(320, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(0, 0%, 10%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(320, 100%, 50%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(207, 90%, 54%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(320, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(0, 0%, 10%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(320, 100%, 50%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(207, 90%, 54%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply antialiased bg-background text-foreground;\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 300;\n  }\n  \n  h1, h2, h3, h4, h5, h6, .title-font, .username-font {\n    font-family: 'Hours', serif;\n    font-weight: 700;\n  }\n  \n  .subtitle-font {\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 500;\n  }\n  \n  .body-text {\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 300;\n  }\n  \n  .btn-primary {\n    @apply bg-primary text-primary-foreground font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200;\n  }\n  \n  .card-elevated {\n    @apply shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 border-l-4 border-l-primary;\n  }\n  \n  .logo-style {\n    background: linear-gradient(135deg, hsl(320, 100%, 50%) 0%, hsl(340, 85%, 48%) 100%);\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);\n  }\n}\n\n/* Striking black and flashing pink color palette */\n.text-ff-primary {\n  color: hsl(320, 100%, 50%);\n}\n\n.bg-ff-primary {\n  background-color: hsl(320, 100%, 50%);\n}\n\n.border-ff-primary {\n  border-color: hsl(320, 100%, 50%);\n}\n\n.text-ff-primary\\/10 {\n  color: hsl(320, 100%, 50%, 0.1);\n}\n\n.bg-ff-primary\\/10 {\n  background-color: hsl(320, 100%, 50%, 0.1);\n}\n\n.border-ff-primary\\/20 {\n  border-color: hsl(320, 100%, 50%, 0.2);\n}\n\n/* Typography classes */\n.font-secondary-title {\n  font-family: 'Montserrat', sans-serif;\n  font-weight: 500;\n}\n\n/* Scrollable containers */\n.scrollable-container {\n  max-height: 80vh;\n  overflow-y: auto;\n}\n\n.scrollable-popup {\n  max-height: 70vh;\n  overflow-y: auto;\n}\n","size_bytes":3426},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/language-provider.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { translations } from '@/lib/translations';\n\ntype Language = 'en' | 'it';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: React.ReactNode }) {\n  const [language, setLanguage] = useState<Language>(() => {\n    if (typeof window !== 'undefined') {\n      const stored = localStorage.getItem('language') as Language;\n      return stored && ['en', 'it'].includes(stored) ? stored : 'en';\n    }\n    return 'en';\n  });\n\n  useEffect(() => {\n    localStorage.setItem('language', language);\n  }, [language]);\n\n  const t = (key: string): string => {\n    return translations[language][key as keyof typeof translations[typeof language]] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};","size_bytes":1295},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Home, Users, Calendar, Car, Settings, Menu, LogOut, Languages } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/components/language-provider\";\nimport logoPath from \"@assets/FFF_Logo_white_1754154030771.png\";\n\ninterface NavigationProps {\n  currentView: string;\n  onViewChange: (view: string) => void;\n  onLogout: () => void;\n}\n\nexport function Navigation({ currentView, onViewChange, onLogout }: NavigationProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { toast } = useToast();\n  const { language, setLanguage, t } = useLanguage();\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest('POST', '/api/auth/logout'),\n    onSuccess: () => {\n      queryClient.clear();\n      onLogout();\n      toast({\n        title: t('loggedOut'),\n      });\n    },\n  });\n\n  const navigationItems = [\n    { id: 'dashboard', label: t('dashboard'), icon: Home },\n    { id: 'attendance', label: t('attendance'), icon: Calendar },\n    { id: 'participants', label: t('participants'), icon: Users },\n    { id: 'rides', label: t('rides'), icon: Car },\n  ];\n\n  const handleNavigation = (view: string) => {\n    onViewChange(view);\n    setIsMobileMenuOpen(false);\n  };\n\n  const NavItems = ({ mobile = false }: { mobile?: boolean }) => (\n    <>\n      {navigationItems.map(({ id, label, icon: Icon }) => (\n        <Button\n          key={id}\n          variant={currentView === id ? \"default\" : \"ghost\"}\n          className={`${mobile ? 'w-full justify-start' : ''} flex items-center gap-2`}\n          onClick={() => handleNavigation(id)}\n        >\n          <Icon className=\"h-4 w-4\" />\n          {label}\n        </Button>\n      ))}\n    </>\n  );\n\n  return (\n    <nav className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 sm:px-6 lg:px-8\">\n      <div className=\"flex justify-between items-center h-16\">\n        {/* Logo */}\n        <div className=\"flex items-center space-x-3\">\n          <img src={logoPath} alt=\"FroForForno\" className=\"h-8 w-auto\" />\n        </div>\n\n        {/* Desktop Navigation */}\n        <div className=\"hidden md:flex items-center space-x-4\">\n          <NavItems />\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex items-center space-x-4\">\n          {/* Language Switcher */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\">\n                <Languages className=\"h-4 w-4 mr-2\" />\n                {language.toUpperCase()}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem onClick={() => setLanguage('en')}>\n                English\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setLanguage('it')}>\n                Italiano\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* Logout Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => logoutMutation.mutate()}\n            disabled={logoutMutation.isPending}\n            className=\"hidden md:flex\"\n          >\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            {t('logout')}\n          </Button>\n\n          {/* Mobile Menu */}\n          <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n            <SheetTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden\">\n                <Menu className=\"h-4 w-4\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-64\">\n              <div className=\"flex flex-col space-y-4 mt-8\">\n                <NavItems mobile />\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => logoutMutation.mutate()}\n                  disabled={logoutMutation.isPending}\n                  className=\"w-full justify-start\"\n                >\n                  <LogOut className=\"h-4 w-4 mr-2\" />\n                  {t('logout')}\n                </Button>\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":4619},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1600},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/translations.ts":{"content":"export const translations = {\n  en: {\n    // Navigation\n    dashboard: \"Dashboard\",\n    attendance: \"Attendance\",\n    participants: \"Participants\",\n    rides: \"Rides\",\n    admin: \"Admin\",\n    logout: \"Logout\",\n    loggedOut: \"Logged out successfully\",\n    \n    // Login\n    loginTitle: \"Welcome to FroForForno\",\n    loginSubtitle: \"Sign in to manage your event attendance\",\n    username: \"Username\",\n    enterUsername: \"Enter your username\",\n    signIn: \"Sign In\",\n    signUp: \"Sign Up\",\n    signingIn: \"Signing in...\",\n    creatingAccount: \"Creating account...\",\n    createAccount: \"Create Account\",\n    welcomeBack: \"Welcome Back\",\n    signInDesc: \"Enter your existing username to continue\",\n    signUpDesc: \"Create a new account to join the event\",\n    chooseUsername: \"Choose Username\",\n    enterNewUsername: \"Enter a new username\",\n    userNotFound: \"User not found\",\n    userNotFoundDesc: \"This username doesn't exist. Please try signing up instead.\",\n    usernameExists: \"Username taken\",\n    usernameExistsDesc: \"This username already exists. Please try signing in instead.\",\n    accountCreated: \"Account created successfully!\",\n    redirectingToAttendance: \"You'll be redirected to set your attendance.\",\n    \n    // Dashboard\n    eventDates: \"August 28-30, 2025\",\n    phone: \"Phone Number\",\n    email: \"Email Address\",\n    contactOptional: \"(optional)\",\n    enterPhone: \"Enter your phone number\",\n    enterEmail: \"Enter your email address\",\n    daysAttending: \"Days Attending\",\n    rideCoordination: \"Ride Coordination\",\n    availableRides: \"Available Rides\",\n    dietaryPreferences: \"Dietary Preferences\",\n    quickActions: \"Quick Actions\",\n    updateAttendance: \"Update Attendance\",\n    viewParticipants: \"View Participants\",\n    \n    // Attendance\n    attendanceTitle: \"Event Attendance\",\n    attendanceSubtitle: \"Select your attendance for each day\",\n    dayLabel: \"Day\",\n    breakfast: \"Breakfast\",\n    lunch: \"Lunch\", \n    dinner: \"Dinner\",\n    overnight: \"Overnight Stay\",\n    dietary: \"Dietary Preferences\",\n    omnivore: \"Omnivore\",\n    vegetarian: \"Vegetarian\",\n    vegan: \"Vegan\", \n    glutenFree: \"Gluten-free\",\n    dairyFree: \"Dairy-free\",\n    allergies: \"Allergies\",\n    additionalNotes: \"Additional Notes\",\n    saveAttendance: \"Save Attendance\",\n    attendanceSaved: \"Attendance saved successfully!\",\n    \n    // Participants\n    participantsTitle: \"Event Participants\",\n    participantsSubtitle: \"View all registered participants\",\n    \n    // Rides\n    ridesTitle: \"Ride Coordination\",\n    ridesSubtitle: \"Offer or request rides to the event\",\n    offerRide: \"Offer a Ride\",\n    requestRide: \"Request a Ride\",\n    requestedRides: \"Requested Rides\",\n    joinRequests: \"Join Requests\",\n    myRequests: \"My Requests\",\n    offerRideDescription: \"Create a new ride offer for other participants\",\n    requestRideDescription: \"Request a ride from other participants\",\n    seats: \"seats\",\n    time: \"Time\",\n    notes: \"Notes\",\n    tripType: \"Trip Type\",\n    eventDay: \"Event Day\",\n    departure: \"Departure\",\n    destination: \"Destination\", \n    preferredTime: \"Preferred Time\",\n    departureFromMassello: \"Departure from Massello\",\n    arrivalToMassello: \"Arrival to Massello\",\n    totalSeats: \"Total Seats\",\n    routeLabel: \"Route\",\n    locationPlaceholder: \"Where to?\",\n    locationFromPlaceholder: \"Where from?\",\n    timePlaceholder: \"e.g., 9:00 AM\",\n    notesPlaceholder: \"Additional information...\",\n    requestToJoin: \"Request to Join\",\n    sendRequest: \"Send Request\",\n    joinMessage: \"Message (optional)\",\n    joinMessagePlaceholder: \"Let the driver know anything relevant...\",\n    sendJoinRequestDescription: \"Send a join request to the driver for this ride\",\n    accepted: \"Accepted\",\n    declined: \"Declined\", \n    pending: \"Pending\",\n    accept: \"Accept\",\n    decline: \"Decline\",\n    full: \"Full\",\n    passengers: \"Passengers\",\n    driver: \"Driver\",\n    route: \"Route\",\n    status: \"Status\",\n    wantsToJoin: \"wants to join\",\n    yourMessage: \"Your message\",\n    responseReceived: \"Response received\",\n    \n    // Ride coordination\n    offeringRide: \"Offering Ride\",\n    requestingRide: \"Requesting Ride\",\n    joinedRide: \"Joined Ride\",\n    noRideCoordination: \"No Ride Coordination\",\n    rideDetails: \"Ride Details\",\n    attendanceDetails: \"Attendance Details\",\n    manageRides: \"Manage Rides\",\n    adminPanel: \"Admin Panel\",\n    \n\n    searchParticipants: \"Search participants...\",\n    filterByDay: \"Filter by day\",\n    filterByRide: \"Filter by ride\",\n    allDays: \"All days\",\n    allRideStatuses: \"All ride statuses\",\n    showingParticipants: \"Showing\",\n    attendingDays: \"Attending Days\",\n    noAttendance: \"No attendance\",\n    noParticipantsFound: \"No participants found\",\n    noParticipantsFoundDesc: \"Try adjusting your search filters\",\n    \n    // Common\n    loading: \"Loading...\",\n    save: \"Save\",\n    cancel: \"Cancel\",\n    edit: \"Edit\",\n    delete: \"Delete\",\n    confirm: \"Confirm\",\n    notSet: \"Not Set\",\n  },\n  it: {\n    // Navigation\n    dashboard: \"Dashboard\",\n    attendance: \"Partecipazione\",\n    participants: \"Partecipanti\",\n    rides: \"Passaggi\",\n    admin: \"Admin\",\n    logout: \"Esci\",\n    loggedOut: \"Disconnesso con successo\",\n    \n    // Login\n    loginTitle: \"Benvenuto a FroForForno\",\n    loginSubtitle: \"Accedi per gestire la tua partecipazione all'evento\",\n    username: \"Nome utente\",\n    enterUsername: \"Inserisci il tuo nome utente\",\n    signIn: \"Accedi\",\n    signUp: \"Registrati\",\n    signingIn: \"Accesso in corso...\",\n    creatingAccount: \"Creazione account...\",\n    createAccount: \"Crea Account\",\n    welcomeBack: \"Bentornato\",\n    signInDesc: \"Inserisci il tuo nome utente esistente per continuare\",\n    signUpDesc: \"Crea un nuovo account per partecipare all'evento\",\n    chooseUsername: \"Scegli Nome Utente\",\n    enterNewUsername: \"Inserisci un nuovo nome utente\",\n    userNotFound: \"Utente non trovato\",\n    userNotFoundDesc: \"Questo nome utente non esiste. Prova a registrarti invece.\",\n    usernameExists: \"Nome utente già in uso\",\n    usernameExistsDesc: \"Questo nome utente esiste già. Prova ad accedere invece.\",\n    accountCreated: \"Account creato con successo!\",\n    redirectingToAttendance: \"Sarai reindirizzato alle impostazioni di partecipazione.\",\n    \n    // Dashboard  \n    eventDates: \"28-30 Agosto, 2025\",\n    phone: \"Numero di Telefono\",\n    email: \"Indirizzo Email\", \n    contactOptional: \"(opzionale)\",\n    enterPhone: \"Inserisci il tuo numero di telefono\",\n    enterEmail: \"Inserisci il tuo indirizzo email\",\n    daysAttending: \"Giorni di Partecipazione\",\n    rideCoordination: \"Coordinamento Passaggi\",\n    availableRides: \"Passaggi Disponibili\",\n    dietaryPreferences: \"Preferenze Alimentari\",\n    quickActions: \"Azioni Rapide\",\n    updateAttendance: \"Aggiorna Partecipazione\",\n    viewParticipants: \"Vedi Partecipanti\",\n    \n    // Attendance\n    attendanceTitle: \"Partecipazione all'Evento\",\n    attendanceSubtitle: \"Seleziona la tua partecipazione per ogni giorno\",\n    dayLabel: \"Giorno\",\n    breakfast: \"Colazione\",\n    lunch: \"Pranzo\",\n    dinner: \"Cena\", \n    overnight: \"Pernottamento\",\n    dietary: \"Preferenze Alimentari\",\n    omnivore: \"Onnivoro\",\n    vegetarian: \"Vegetariano\",\n    vegan: \"Vegano\",\n    glutenFree: \"Senza glutine\",\n    dairyFree: \"Senza latticini\",\n    allergies: \"Allergie\",\n    additionalNotes: \"Note Aggiuntive\",\n    saveAttendance: \"Salva Partecipazione\",\n    attendanceSaved: \"Partecipazione salvata con successo!\",\n    \n    // Participants\n    participantsTitle: \"Partecipanti all'Evento\", \n    participantsSubtitle: \"Visualizza tutti i partecipanti registrati\",\n    \n    // Rides\n    ridesTitle: \"Coordinamento Passaggi\",\n    ridesSubtitle: \"Offri o richiedi passaggi per l'evento\",\n    offerRide: \"Offri un Passaggio\",\n    requestRide: \"Richiedi un Passaggio\",\n    requestedRides: \"Passaggi Richiesti\",\n    joinRequests: \"Richieste di Partecipazione\",\n    myRequests: \"Le Mie Richieste\",\n    offerRideDescription: \"Crea una nuova offerta di passaggio per altri partecipanti\",\n    requestRideDescription: \"Richiedi un passaggio ad altri partecipanti\",\n    seats: \"posti\",\n    time: \"Orario\",\n    notes: \"Note\",\n    tripType: \"Tipo di Viaggio\",\n    eventDay: \"Giorno dell'Evento\",\n    departure: \"Partenza\",\n    destination: \"Destinazione\",\n    preferredTime: \"Orario Preferito\",\n    departureFromMassello: \"Partenza da Massello\",\n    arrivalToMassello: \"Arrivo a Massello\",\n    totalSeats: \"Posti Totali\", \n    routeLabel: \"Percorso\",\n    locationPlaceholder: \"Dove?\",\n    locationFromPlaceholder: \"Da dove?\",\n    timePlaceholder: \"es. 9:00\",\n    notesPlaceholder: \"Informazioni aggiuntive...\",\n    requestToJoin: \"Richiedi di Partecipare\",\n    sendRequest: \"Invia Richiesta\",\n    joinMessage: \"Messaggio (opzionale)\",\n    joinMessagePlaceholder: \"Fai sapere all'autista qualsiasi cosa rilevante...\",\n    sendJoinRequestDescription: \"Invia una richiesta di partecipazione all'autista per questo passaggio\",\n    accepted: \"Accettato\",\n    declined: \"Rifiutato\",\n    pending: \"In Attesa\",\n    accept: \"Accetta\",\n    decline: \"Rifiuta\", \n    full: \"Completo\",\n    passengers: \"Passeggeri\",\n    driver: \"Autista\",\n    route: \"Percorso\",\n    status: \"Stato\",\n    wantsToJoin: \"vuole partecipare\",\n    yourMessage: \"Il tuo messaggio\",\n    responseReceived: \"Risposta ricevuta\",\n    \n    // Ride coordination\n    offeringRide: \"Offre Passaggio\",\n    requestingRide: \"Richiede Passaggio\",\n    joinedRide: \"In Passaggio\",\n    noRideCoordination: \"Nessun Coordinamento\",\n    rideDetails: \"Dettagli Passaggio\",\n    attendanceDetails: \"Dettagli Partecipazione\",\n    manageRides: \"Gestisci Passaggi\",\n    adminPanel: \"Pannello Admin\",\n    \n\n    searchParticipants: \"Cerca partecipanti...\",\n    filterByDay: \"Filtra per giorno\",\n    filterByRide: \"Filtra per passaggio\",\n    allDays: \"Tutti i giorni\",\n    allRideStatuses: \"Tutti gli stati\",\n    showingParticipants: \"Mostrando\",\n    attendingDays: \"Giorni partecipazione\",\n    noAttendance: \"Nessuna partecipazione\",\n    noParticipantsFound: \"Nessun partecipante trovato\",\n    noParticipantsFoundDesc: \"Prova a modificare i filtri di ricerca\",\n    \n    // Enhanced ride system\n    notifications: 'Notifiche',\n    newNotification: 'Nuova notifica',\n    markAsRead: 'Segna come letto',\n    rideModified: 'Passaggio modificato',\n    rideOffer: 'Offerta passaggio',\n    modifyRide: 'Modifica passaggio',\n    inviteUsers: 'Invita utenti',\n    selectRide: 'Seleziona passaggio',\n    createNewRide: 'Crea nuovo passaggio',\n    sendInvitations: 'Invia inviti',\n    noRidesAvailable: 'Non hai passaggi disponibili',\n    deleteRide: 'Elimina passaggio',\n    deleteRequest: 'Elimina richiesta',\n    confirmDelete: 'Conferma eliminazione',\n    deleteRideConfirm: 'Sei sicuro di voler eliminare questo passaggio?',\n    deleteRequestConfirm: 'Sei sicuro di voler eliminare questa richiesta?',\n    \n    // Common\n    loading: \"Caricamento...\",\n    save: \"Salva\",\n    cancel: \"Annulla\",\n    edit: \"Modifica\",\n    delete: \"Elimina\",\n    confirm: \"Conferma\",\n    notSet: \"Non Impostato\",\n  }\n};","size_bytes":11043},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Users, Calendar, Car, Utensils, Download, Mail, Lock, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\n\ninterface AdminProps {\n  onLogout: () => void;\n}\n\nexport function Admin({ onLogout }: AdminProps) {\n  const [isAuthenticated, setIsAuthenticated] = useState(true); // Start authenticated since we're already in admin mode\n  const [password, setPassword] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: statsData, isLoading } = useQuery({\n    queryKey: ['/api/admin/stats'],\n    enabled: isAuthenticated,\n  });\n\n  const { data: usersData } = useQuery({\n    queryKey: ['/api/admin/users'],\n    enabled: isAuthenticated,\n  });\n\n  const stats = (statsData as any)?.stats;\n  const users = (usersData as any)?.users || [];\n\n\n\n  const deleteUserMutation = useMutation({\n    mutationFn: (userId: number) => apiRequest('DELETE', `/api/admin/users/${userId}`),\n    onSuccess: () => {\n      toast({\n        title: \"User deleted\",\n        description: \"User has been successfully deleted.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error deleting user\",\n        description: \"Failed to delete user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const handleExport = (type: string) => {\n    // Open the export endpoint in a new window to trigger download\n    window.open(`/api/admin/export/${type}`, '_blank');\n    toast({\n      title: `${type.charAt(0).toUpperCase() + type.slice(1)} export started`,\n      description: \"Your download should begin shortly.\",\n    });\n  };\n\n  const handleSendReminders = () => {\n    toast({\n      title: \"Reminder functionality not implemented\",\n      description: \"This would send email reminders to participants.\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3\"></div>\n          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    setPassword(\"\");\n    onLogout();\n  };\n\n  if (!stats) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-red-500\">Access denied. Admin privileges required.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n      <div className=\"mb-8 flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Admin Dashboard</h2>\n          <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">Event overview and management tools</p>\n        </div>\n        <Button onClick={handleLogout} variant=\"outline\" size=\"sm\">\n          <Lock className=\"h-4 w-4 mr-2\" />\n          Logout\n        </Button>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 dark:bg-blue-900 rounded-lg\">\n                <Users className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Participants</p>\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{stats.totalParticipants}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-lg\">\n                <Calendar className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Peak Day</p>\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\n                  Aug {Math.max(\n                    stats.day1.breakfast + stats.day1.lunch + stats.day1.dinner + stats.day1.night,\n                    stats.day2.breakfast + stats.day2.lunch + stats.day2.dinner + stats.day2.night,\n                    stats.day3.breakfast + stats.day3.lunch + stats.day3.dinner + stats.day3.night\n                  ) === (stats.day1.breakfast + stats.day1.lunch + stats.day1.dinner + stats.day1.night) ? '28' :\n                  Math.max(\n                    stats.day2.breakfast + stats.day2.lunch + stats.day2.dinner + stats.day2.night,\n                    stats.day3.breakfast + stats.day3.lunch + stats.day3.dinner + stats.day3.night\n                  ) === (stats.day2.breakfast + stats.day2.lunch + stats.day2.dinner + stats.day2.night) ? '29' : '30'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-100 dark:bg-purple-900 rounded-lg\">\n                <Car className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Ride Offers</p>\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{stats.transportation.offering}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-yellow-100 dark:bg-yellow-900 rounded-lg\">\n                <Utensils className=\"h-6 w-6 text-yellow-600 dark:text-yellow-400\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Special Diets</p>\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\n                  {stats.dietary.vegetarian + stats.dietary.vegan + stats.dietary.glutenFree + stats.dietary.dairyFree + stats.dietary.withAllergies}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Daily Breakdown */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">August 28 Attendance</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Breakfast</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day1.breakfast}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Lunch</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day1.lunch}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Dinner</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day1.dinner}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Night Activity</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day1.night}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">August 29 Attendance</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Breakfast</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day2.breakfast}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Lunch</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day2.lunch}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Dinner</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day2.dinner}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Night Activity</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day2.night}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">August 30 Attendance</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Breakfast</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day3.breakfast}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Lunch</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day3.lunch}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Dinner</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day3.dinner}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Night Activity</span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{stats.day3.night}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* User Management */}\n      <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 mb-8\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-6\">User Management</h3>\n          <div className=\"space-y-4\">\n            {users.map((user: any) => (\n              <div key={user.id} className=\"flex items-center justify-between p-4 border border-gray-200 dark:border-gray-600 rounded-lg\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <p className=\"font-medium text-gray-900 dark:text-white\">{user.username}</p>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">ID: {user.id}</p>\n                    </div>\n                    {user.isAdmin && (\n                      <span className=\"px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded-full\">\n                        Admin\n                      </span>\n                    )}\n                  </div>\n                  {user.attendance && (\n                    <div className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">\n                      <span>Attending: </span>\n                      {[\n                        user.attendance.day1Breakfast && 'Aug 28 Breakfast',\n                        user.attendance.day1Lunch && 'Aug 28 Lunch',\n                        user.attendance.day1Dinner && 'Aug 28 Dinner',\n                        user.attendance.day1Night && 'Aug 28 Night',\n                        user.attendance.day2Breakfast && 'Aug 29 Breakfast',\n                        user.attendance.day2Lunch && 'Aug 29 Lunch',\n                        user.attendance.day2Dinner && 'Aug 29 Dinner',\n                        user.attendance.day2Night && 'Aug 29 Night',\n                        user.attendance.day3Breakfast && 'Aug 30 Breakfast',\n                        user.attendance.day3Lunch && 'Aug 30 Lunch',\n                        user.attendance.day3Dinner && 'Aug 30 Dinner',\n                        user.attendance.day3Night && 'Aug 30 Night',\n                      ].filter(Boolean).join(', ') || 'No attendance registered'}\n                    </div>\n                  )}\n                </div>\n                <AlertDialog>\n                  <AlertDialogTrigger asChild>\n                    <Button variant=\"destructive\" size=\"sm\" disabled={user.isAdmin}>\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Delete User</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        Are you sure you want to delete user \"{user.username}\"? This action cannot be undone and will remove all their data including attendance records and rides.\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                      <AlertDialogAction\n                        onClick={() => deleteUserMutation.mutate(user.id)}\n                        className=\"bg-red-600 hover:bg-red-700\"\n                      >\n                        Delete User\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              </div>\n            ))}\n            {users.length === 0 && (\n              <p className=\"text-center text-gray-500 dark:text-gray-400 py-4\">No users found</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Export and Actions */}\n      <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Export & Actions</h3>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Button variant=\"outline\" onClick={() => handleExport('attendance')}>\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Attendance\n            </Button>\n            <Button variant=\"outline\" onClick={() => handleExport('rides')}>\n              <Car className=\"h-4 w-4 mr-2\" />\n              Export Rides\n            </Button>\n            <Button variant=\"outline\" onClick={() => handleExport('dietary')}>\n              <Utensils className=\"h-4 w-4 mr-2\" />\n              Export Dietary\n            </Button>\n            <Button onClick={handleSendReminders}>\n              <Mail className=\"h-4 w-4 mr-2\" />\n              Send Reminders\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":17038},"client/src/pages/attendance.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar, Utensils, StickyNote, RotateCcw } from \"lucide-react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/components/language-provider\";\n\nexport function Attendance({ onNavigate }: { onNavigate?: (view: string) => void }) {\n  const [formData, setFormData] = useState({\n    // Day 1 - August 28\n    day1Breakfast: false,\n    day1Lunch: false,\n    day1Dinner: false,\n    day1Night: false,\n    // Day 2 - August 29\n    day2Breakfast: false,\n    day2Lunch: false,\n    day2Dinner: false,\n    day2Night: false,\n    // Day 3 - August 30\n    day3Breakfast: false,\n    day3Lunch: false,\n    day3Dinner: false,\n    day3Night: false,\n    // Dietary\n    omnivore: false,\n    vegetarian: false,\n    vegan: false,\n    glutenFree: false,\n    dairyFree: false,\n    allergies: \"\",\n    // Notes\n    notes: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { t } = useLanguage();\n\n  const { data: attendanceData, isLoading } = useQuery({\n    queryKey: ['/api/attendance'],\n  });\n\n  useEffect(() => {\n    const attendance = (attendanceData as any)?.attendance;\n    if (attendance) {\n      setFormData({\n        day1Breakfast: attendance.day1Breakfast || false,\n        day1Lunch: attendance.day1Lunch || false,\n        day1Dinner: attendance.day1Dinner || false,\n        day1Night: attendance.day1Night || false,\n        day2Breakfast: attendance.day2Breakfast || false,\n        day2Lunch: attendance.day2Lunch || false,\n        day2Dinner: attendance.day2Dinner || false,\n        day2Night: attendance.day2Night || false,\n        day3Breakfast: attendance.day3Breakfast || false,\n        day3Lunch: attendance.day3Lunch || false,\n        day3Dinner: attendance.day3Dinner || false,\n        day3Night: attendance.day3Night || false,\n        omnivore: attendance.omnivore || false,\n        vegetarian: attendance.vegetarian || false,\n        vegan: attendance.vegan || false,\n        glutenFree: attendance.glutenFree || false,\n        dairyFree: attendance.dairyFree || false,\n        allergies: attendance.allergies || \"\",\n        notes: attendance.notes || \"\",\n      });\n    }\n  }, [attendanceData]);\n\n  const saveMutation = useMutation({\n    mutationFn: (attendanceData: any) => apiRequest('POST', '/api/attendance', attendanceData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance'] });\n      toast({\n        title: t('attendanceSaved'),\n      });\n      // Redirect to dashboard after successful save\n      if (onNavigate) {\n        setTimeout(() => onNavigate('dashboard'), 1000);\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save attendance preferences.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    saveMutation.mutate(formData);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      day1Breakfast: false,\n      day1Lunch: false,\n      day1Dinner: false,\n      day1Night: false,\n      day2Breakfast: false,\n      day2Lunch: false,\n      day2Dinner: false,\n      day2Night: false,\n      day3Breakfast: false,\n      day3Lunch: false,\n      day3Dinner: false,\n      day3Night: false,\n      omnivore: false,\n      vegetarian: false,\n      vegan: false,\n      glutenFree: false,\n      dairyFree: false,\n      allergies: \"\",\n      notes: \"\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"animate-pulse space-y-8\">\n          <div className=\"space-y-2\">\n            <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3\"></div>\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n          </div>\n          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{t('attendanceTitle')}</h2>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">{t('attendanceSubtitle')}</p>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-8\">\n        {/* Day 1: August 28 */}\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg subtitle-font text-gray-900 dark:text-white mb-4 flex items-center\">\n              <Calendar className=\"h-5 w-5 text-primary-600 dark:text-primary-400 mr-2\" />\n              Wednesday, August 28\n            </h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {[\n                { key: 'day1Breakfast', label: t('breakfast') },\n                { key: 'day1Lunch', label: t('lunch') },\n                { key: 'day1Dinner', label: t('dinner') },\n                { key: 'day1Night', label: t('overnight') },\n              ].map(({ key, label }) => (\n                <label key={key} className=\"flex items-center space-x-3 p-3 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer\">\n                  <Checkbox\n                    checked={formData[key as keyof typeof formData] as boolean}\n                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, [key]: checked }))}\n                  />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{label}</p>\n                  </div>\n                </label>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Day 2: August 29 */}\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg subtitle-font text-gray-900 dark:text-white mb-4 flex items-center\">\n              <Calendar className=\"h-5 w-5 text-primary-600 dark:text-primary-400 mr-2\" />\n              Thursday, August 29\n            </h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {[\n                { key: 'day2Breakfast', label: t('breakfast') },\n                { key: 'day2Lunch', label: t('lunch') },\n                { key: 'day2Dinner', label: t('dinner') },\n                { key: 'day2Night', label: t('overnight') },\n              ].map(({ key, label }) => (\n                <label key={key} className=\"flex items-center space-x-3 p-3 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer\">\n                  <Checkbox\n                    checked={formData[key as keyof typeof formData] as boolean}\n                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, [key]: checked }))}\n                  />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{label}</p>\n                  </div>\n                </label>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Day 3: August 30 */}\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg subtitle-font text-gray-900 dark:text-white mb-4 flex items-center\">\n              <Calendar className=\"h-5 w-5 text-primary-600 dark:text-primary-400 mr-2\" />\n              Friday, August 30\n            </h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {[\n                { key: 'day3Breakfast', label: t('breakfast') },\n                { key: 'day3Lunch', label: t('lunch') },\n                { key: 'day3Dinner', label: t('dinner') },\n                { key: 'day3Night', label: t('overnight') },\n              ].map(({ key, label }) => (\n                <label key={key} className=\"flex items-center space-x-3 p-3 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer\">\n                  <Checkbox\n                    checked={formData[key as keyof typeof formData] as boolean}\n                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, [key]: checked }))}\n                  />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{label}</p>\n                  </div>\n                </label>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Dietary Preferences */}\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg subtitle-font text-gray-900 dark:text-white mb-4 flex items-center\">\n              <Utensils className=\"h-5 w-5 text-primary-600 dark:text-primary-400 mr-2\" />\n              {t('dietary')}\n            </h3>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                {[\n                  { key: 'omnivore', label: t('omnivore') },\n                  { key: 'vegetarian', label: t('vegetarian') },\n                  { key: 'vegan', label: t('vegan') },\n                  { key: 'glutenFree', label: t('glutenFree') },\n                  { key: 'dairyFree', label: t('dairyFree') },\n                ].map(({ key, label }) => (\n                  <label key={key} className=\"flex items-center space-x-2 p-3 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer\">\n                    <Checkbox\n                      checked={formData[key as keyof typeof formData] as boolean}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, [key]: checked }))}\n                    />\n                    <span className=\"text-sm text-gray-900 dark:text-white\">{label}</span>\n                  </label>\n                ))}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  {t('allergies')}\n                </label>\n                <Textarea\n                  value={formData.allergies}\n                  onChange={(e) => setFormData(prev => ({ ...prev, allergies: e.target.value }))}\n                  placeholder=\"Please list any food allergies or additional dietary restrictions\"\n                  rows={2}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Additional Notes */}\n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg subtitle-font text-gray-900 dark:text-white mb-4 flex items-center\">\n              <StickyNote className=\"h-5 w-5 text-primary-600 dark:text-primary-400 mr-2\" />\n              {t('additionalNotes')}\n            </h3>\n            <Textarea\n              value={formData.notes}\n              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n              placeholder=\"Any additional information or special requests\"\n              rows={3}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-end\">\n          <Button type=\"button\" variant=\"outline\" onClick={resetForm}>\n            <RotateCcw className=\"h-4 w-4 mr-2\" />\n            Reset Form\n          </Button>\n          <Button type=\"submit\" disabled={saveMutation.isPending}>\n            {saveMutation.isPending ? \"Saving...\" : t('saveAttendance')}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}","size_bytes":12296},"client/src/pages/dashboard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, Car, Utensils, Users, CalendarPlus, CarFront, Leaf, MapPin, Clock, User, Bell } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/components/language-provider\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface DashboardProps {\n  onNavigate: (view: string) => void;\n}\n\nexport function Dashboard({ onNavigate }: DashboardProps) {\n  const { t } = useLanguage();\n  const { data: attendanceData } = useQuery({\n    queryKey: ['/api/attendance'],\n  });\n\n  const { data: ridesData } = useQuery({\n    queryKey: ['/api/rides'],\n  });\n\n  const { data: requestsData } = useQuery({\n    queryKey: ['/api/ride-requests'],\n  });\n\n  const { data: joinRequestsData } = useQuery({\n    queryKey: ['/api/rides/join-requests'],\n  });\n\n  const { data: rideJoinStatusData } = useQuery({\n    queryKey: ['/api/ride-join-status'],\n  });\n\n  const { data: authData } = useQuery({\n    queryKey: ['/api/auth/me'],\n  });\n\n  const { data: notificationsData } = useQuery({\n    queryKey: ['/api/notifications'],\n  });\n\n  const { data: rideInvitationsData } = useQuery({\n    queryKey: ['/api/ride-invitations'],\n  });\n\n  const attendance = (attendanceData as any)?.attendance;\n  const rides = (ridesData as any)?.rides || [];\n  const requests = (requestsData as any)?.requests || [];\n  const joinRequests = (joinRequestsData as any)?.requests || [];\n  const rideJoinStatus = (rideJoinStatusData as any)?.joinRequests || [];\n  const currentUser = (authData as any)?.user;\n  const notifications = (notificationsData as any)?.notifications || [];\n  const unreadNotifications = notifications.filter((n: any) => !n.isRead);\n  const rideInvitations = (rideInvitationsData as any)?.invitations || [];\n  const pendingInvitations = rideInvitations.filter((inv: any) => inv.status === 'pending');\n\n\n\n  const getAttendancePeriods = () => {\n    if (!attendance) return [];\n    \n    // Create a chronological list of all events the user is attending\n    const events = [];\n    \n    if (attendance.day1Breakfast) events.push({ day: 1, event: 'breakfast', label: 'breakfast Aug 28' });\n    if (attendance.day1Lunch) events.push({ day: 1, event: 'lunch', label: 'lunch Aug 28' });\n    if (attendance.day1Dinner) events.push({ day: 1, event: 'dinner', label: 'dinner Aug 28' });\n    if (attendance.day1Night) events.push({ day: 1, event: 'overnight', label: 'overnight Aug 28-29' });\n    \n    if (attendance.day2Breakfast) events.push({ day: 2, event: 'breakfast', label: 'breakfast Aug 29' });\n    if (attendance.day2Lunch) events.push({ day: 2, event: 'lunch', label: 'lunch Aug 29' });\n    if (attendance.day2Dinner) events.push({ day: 2, event: 'dinner', label: 'dinner Aug 29' });\n    if (attendance.day2Night) events.push({ day: 2, event: 'overnight', label: 'overnight Aug 29-30' });\n    \n    if (attendance.day3Breakfast) events.push({ day: 3, event: 'breakfast', label: 'breakfast Aug 30' });\n    if (attendance.day3Lunch) events.push({ day: 3, event: 'lunch', label: 'lunch Aug 30' });\n    if (attendance.day3Dinner) events.push({ day: 3, event: 'dinner', label: 'dinner Aug 30' });\n    \n    if (events.length === 0) return [];\n    \n    // Group continuous periods\n    const periods = [];\n    let currentPeriod = null;\n    \n    for (let i = 0; i < events.length; i++) {\n      if (!currentPeriod) {\n        currentPeriod = { start: events[i], end: events[i] };\n      } else {\n        // Check if this event is continuous with the previous one\n        const prevEvent = events[i - 1];\n        const currentEvent = events[i];\n        \n        const isContinuous = (\n          (prevEvent.day === currentEvent.day) || \n          (prevEvent.day === currentEvent.day - 1 && prevEvent.event === 'overnight') ||\n          (prevEvent.day === currentEvent.day - 1 && currentEvent.event === 'breakfast')\n        );\n        \n        if (isContinuous) {\n          currentPeriod.end = currentEvent;\n        } else {\n          // End current period and start new one\n          periods.push(currentPeriod);\n          currentPeriod = { start: currentEvent, end: currentEvent };\n        }\n      }\n    }\n    \n    if (currentPeriod) {\n      periods.push(currentPeriod);\n    }\n    \n    // Format periods as strings\n    return periods.map(period => {\n      if (period.start.label === period.end.label) {\n        return period.start.label;\n      } else {\n        return `from ${period.start.label} to ${period.end.label}`;\n      }\n    });\n  };\n\n  const getRideCoordinationInfo = () => {\n    if (!currentUser) return null;\n\n    // Check if user is offering a ride\n    const offeringRide = rides.find((ride: any) => ride.driverId === currentUser.id);\n    if (offeringRide) {\n      // Check for pending join requests to show notification\n      const pendingJoinRequests = joinRequests.filter((req: any) => req.status === 'pending');\n      const hasNotifications = pendingJoinRequests.length > 0;\n      \n      return {\n        type: \"offering\",\n        icon: Car,\n        title: t('offeringRide'),\n        details: [\n          `Route: ${offeringRide.departure} → ${offeringRide.destination}`,\n          `Available seats: ${offeringRide.availableSeats}/${offeringRide.totalSeats}`,\n          `Day: ${offeringRide.eventDay === 'day1' ? 'Aug 28' : offeringRide.eventDay === 'day2' ? 'Aug 29' : 'Aug 30'}`,\n          `Departure: ${offeringRide.departureTime}`,\n          offeringRide.notes && `Notes: ${offeringRide.notes}`\n        ].filter(Boolean),\n        color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n        hasNotifications,\n        notificationCount: pendingJoinRequests.length\n      };\n    }\n\n    // Check if user has made join requests\n    const myJoinRequest = rideJoinStatus.find((joinReq: any) => joinReq.status === 'pending');\n    if (myJoinRequest) {\n      return {\n        type: \"pending-request\",\n        icon: Clock,\n        title: \"Pending Join Request\",\n        details: [\n          `Driver: ${myJoinRequest.ride.driver.username}`,\n          `Route: ${myJoinRequest.ride.departure} → ${myJoinRequest.ride.destination}`,\n          `Day: ${myJoinRequest.ride.eventDay === 'day1' ? 'Aug 28' : myJoinRequest.ride.eventDay === 'day2' ? 'Aug 29' : 'Aug 30'}`,\n          `Departure: ${myJoinRequest.ride.departureTime}`,\n          `Status: Waiting for response`\n        ],\n        color: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\"\n      };\n    }\n\n    // Check if user has accepted join request \n    const acceptedJoinRequest = rideJoinStatus.find((joinReq: any) => joinReq.status === 'accepted');\n    if (acceptedJoinRequest) {\n      return {\n        type: \"ride-accepted\",\n        icon: User,\n        title: `Ride Accepted by ${acceptedJoinRequest.ride.driver.username}`,\n        details: [\n          `Driver: ${acceptedJoinRequest.ride.driver.username}`,\n          `Route: ${acceptedJoinRequest.ride.departure} → ${acceptedJoinRequest.ride.destination}`,\n          `Day: ${acceptedJoinRequest.ride.eventDay === 'day1' ? 'Aug 28' : acceptedJoinRequest.ride.eventDay === 'day2' ? 'Aug 29' : 'Aug 30'}`,\n          `Departure: ${acceptedJoinRequest.ride.departureTime}`\n        ],\n        color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\"\n      };\n    }\n\n    // Check if user has pending ride invitations\n    if (pendingInvitations.length > 0) {\n      return {\n        type: \"invitation-pending\",\n        icon: Bell,\n        title: `${pendingInvitations.length} Ride Invitation${pendingInvitations.length > 1 ? 's' : ''}`,\n        details: pendingInvitations.slice(0, 2).map((inv: any) => \n          `${inv.inviter.username}: ${inv.ride.departure} → ${inv.ride.destination}`\n        ),\n        color: \"bg-ff-primary/10 text-ff-primary dark:bg-ff-primary/20 dark:text-ff-primary\",\n        hasNotifications: true,\n        notificationCount: pendingInvitations.length\n      };\n    }\n\n    // Check if user has requested a ride\n    const requestingRide = requests.find((request: any) => request.requesterId === currentUser.id);\n    if (requestingRide) {\n      return {\n        type: \"requesting\",\n        icon: MapPin,\n        title: t('requestingRide'),\n        details: [\n          `Route: ${requestingRide.departure} → ${requestingRide.destination}`,\n          `Day: ${requestingRide.eventDay === 'day1' ? 'Aug 28' : requestingRide.eventDay === 'day2' ? 'Aug 29' : 'Aug 30'}`,\n          `Preferred time: ${requestingRide.preferredTime}`,\n          requestingRide.notes && `Notes: ${requestingRide.notes}`\n        ].filter(Boolean),\n        color: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\"\n      };\n    }\n\n    return null;\n  };\n\n  const getDietaryStatus = () => {\n    if (!attendance) return t('notSet');\n    const preferences = [];\n    if (attendance.omnivore) preferences.push(t('omnivore'));\n    if (attendance.vegetarian) preferences.push(t('vegetarian'));\n    if (attendance.vegan) preferences.push(t('vegan'));\n    if (attendance.glutenFree) preferences.push(t('glutenFree'));\n    if (attendance.dairyFree) preferences.push(t('dairyFree'));\n    if (attendance.allergies) preferences.push(`${t('allergies')}: ${attendance.allergies}`);\n    \n    // Default to Vegan if nothing is specified\n    if (preferences.length === 0) {\n      preferences.push(t('vegan'));\n    }\n    \n    return preferences.join(', ');\n  };\n\n  const rideInfo = getRideCoordinationInfo();\n  const attendancePeriods = getAttendancePeriods();\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl title-font text-gray-900 dark:text-white\">{currentUser?.username || t('welcomeBack')}</h2>\n        <p className=\"mt-1 text-sm body-text text-gray-600 dark:text-gray-400\">{t('eventDates')} • Gestisci la tua partecipazione e preferenze</p>\n      </div>\n\n      {/* Notifications Section */}\n      {unreadNotifications.length > 0 && (\n        <div className=\"bg-ff-primary/10 border border-ff-primary/20 rounded-lg p-4 mb-8\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <div className=\"w-2 h-2 bg-ff-primary rounded-full animate-pulse\" />\n            <h3 className=\"subtitle-font text-ff-primary\">\n              {t('notifications')} ({unreadNotifications.length})\n            </h3>\n          </div>\n          <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n            {unreadNotifications.slice(0, 3).map((notification: any) => (\n              <div key={notification.id} className=\"text-sm body-text text-gray-700 dark:text-gray-300 bg-white/50 dark:bg-gray-800/50 p-2 rounded\">\n                {notification.message}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n\n\n        <Card className=\"card-elevated bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"relative p-3 bg-gradient-to-br from-ff-primary/20 to-black/10 dark:from-ff-primary/30 dark:to-black/20 rounded-xl border-2 border-ff-primary/20\">\n                <Car className=\"h-6 w-6 text-ff-primary\" />\n                {rideInfo?.hasNotifications && (\n                  <div className=\"absolute -top-2 -right-2 bg-ff-primary text-black text-xs font-bold rounded-full h-6 w-6 flex items-center justify-center animate-pulse\">\n                    {rideInfo.notificationCount}\n                  </div>\n                )}\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm subtitle-font text-gray-600 dark:text-gray-400\">{t('rideCoordination')}</p>\n                <p className=\"text-lg body-text text-gray-900 dark:text-white\">\n                  {rideInfo ? rideInfo.title : t('noRideCoordination')}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"card-elevated bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-gradient-to-br from-black/10 to-ff-primary/20 dark:from-black/20 dark:to-ff-primary/30 rounded-xl border-2 border-black/20\">\n                <Utensils className=\"h-6 w-6 text-black dark:text-white\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm subtitle-font text-gray-600 dark:text-gray-400\">{t('dietary')}</p>\n                <p className=\"text-sm body-text text-gray-900 dark:text-white line-clamp-2\">\n                  {getDietaryStatus()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Attendance Information */}\n      {attendancePeriods.length > 0 && (\n        <Card className=\"card-elevated bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center mb-4\">\n              <CalendarPlus className=\"h-5 w-5 text-green-600 dark:text-green-400 mr-2\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">{t('attendanceDetails')}</h3>\n            </div>\n            <div className=\"space-y-2\">\n              {attendancePeriods.map((period, index) => (\n                <div key={index} className=\"flex items-center text-sm text-gray-700 dark:text-gray-300\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                  <span className=\"capitalize\">{period}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Detailed Ride Information */}\n      {rideInfo && (\n        <Card className=\"card-elevated bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center mb-4\">\n              <rideInfo.icon className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mr-2\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">{t('rideDetails')}</h3>\n              <Badge className={`ml-auto ${rideInfo.color}`}>\n                {rideInfo.title}\n              </Badge>\n            </div>\n            <div className=\"space-y-2\">\n              {rideInfo.details.map((detail: string, index: number) => (\n                <div key={index} className=\"flex items-center text-sm text-gray-700 dark:text-gray-300\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-3\"></div>\n                  <span>{detail}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <Button\n          onClick={() => onNavigate('attendance')}\n          className=\"h-20 flex flex-col items-center justify-center space-y-2\"\n          variant=\"outline\"\n        >\n          <Calendar className=\"h-6 w-6\" />\n          <span className=\"text-sm\">{t('updateAttendance')}</span>\n        </Button>\n\n        <Button\n          onClick={() => onNavigate('rides')}\n          className=\"h-20 flex flex-col items-center justify-center space-y-2\"\n          variant=\"outline\"\n        >\n          <CarFront className=\"h-6 w-6\" />\n          <span className=\"text-sm\">{t('manageRides')}</span>\n        </Button>\n\n        <Button\n          onClick={() => onNavigate('participants')}\n          className=\"h-20 flex flex-col items-center justify-center space-y-2\"\n          variant=\"outline\"\n        >\n          <Users className=\"h-6 w-6\" />\n          <span className=\"text-sm\">{t('viewParticipants')}</span>\n        </Button>\n\n\n      </div>\n    </div>\n  );\n}","size_bytes":16024},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { LogIn, UserPlus } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/components/language-provider\";\nimport logoPath from \"@assets/FFF_Logo_white_1754154030771.png\";\n\ninterface LoginProps {\n  onLogin: () => void;\n  onSignUp: () => void;\n  onAdminLogin: () => void;\n}\n\nexport function Login({ onLogin, onSignUp, onAdminLogin }: LoginProps) {\n  const [username, setUsername] = useState(\"\");\n  const [signUpData, setSignUpData] = useState({\n    username: \"\",\n    phone: \"\"\n  });\n  const [adminPassword, setAdminPassword] = useState(\"\");\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  const loginMutation = useMutation({\n    mutationFn: (username: string) => apiRequest('POST', '/api/auth/login', { username }),\n    onSuccess: () => {\n      toast({\n        title: t('welcomeBack'),\n      });\n      onLogin();\n    },\n    onError: (error: any) => {\n      if (error?.message?.includes('not found')) {\n        toast({\n          title: t('userNotFound'),\n          description: t('userNotFoundDesc'),\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Login failed\",\n          description: \"Please check your username and try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const signUpMutation = useMutation({\n    mutationFn: (userData: any) => apiRequest('POST', '/api/auth/signup', userData),\n    onSuccess: () => {\n      toast({\n        title: t('accountCreated'),\n        description: t('redirectingToAttendance'),\n      });\n      onSignUp();\n    },\n    onError: (error: any) => {\n      if (error?.message?.includes('already exists')) {\n        toast({\n          title: t('usernameExists'),\n          description: t('usernameExistsDesc'),\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Sign-up failed\",\n          description: \"Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const adminLoginMutation = useMutation({\n    mutationFn: async (password: string) => {\n      // Direct admin authentication - no user login required\n      await apiRequest('POST', '/api/admin/auth', { password });\n      return true;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Admin access granted\",\n        description: \"Redirecting to admin panel...\",\n      });\n      onAdminLogin();\n    },\n    onError: (error: any) => {\n      if (error?.message?.includes('Invalid admin password')) {\n        toast({\n          title: \"Invalid admin password\",\n          description: \"Please check your admin password and try again.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Admin login failed\",\n          description: \"Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleSignIn = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (username.trim()) {\n      loginMutation.mutate(username.trim());\n    }\n  };\n\n  const handleSignUp = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (signUpData.username.trim()) {\n      const userData = {\n        username: signUpData.username.trim(),\n        phone: signUpData.phone.trim() || null\n      };\n      signUpMutation.mutate(userData);\n    }\n  };\n\n  const handleAdminLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (adminPassword.trim()) {\n      adminLoginMutation.mutate(adminPassword.trim());\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gray-50 dark:bg-gray-900\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <img src={logoPath} alt=\"FroForForno Logo\" className=\"mx-auto h-16 w-auto mb-4\" />\n          <p className=\"mt-1 text-lg text-gray-700 dark:text-gray-300 font-medium leading-tight\">\n            un'unica festa<br />\n            una festa unica\n          </p>\n          <p className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">{t('eventDates')}</p>\n        </div>\n        \n        <Card className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n          <CardContent className=\"p-8\">\n            <Tabs defaultValue=\"signin\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"signin\">{t('signIn')}</TabsTrigger>\n                <TabsTrigger value=\"signup\">{t('signUp')}</TabsTrigger>\n                <TabsTrigger value=\"admin\">Admin</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"signin\" className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-xl subtitle-font text-gray-900 dark:text-white\">{t('welcomeBack')}</h3>\n                  <p className=\"text-sm body-text text-gray-600 dark:text-gray-400 mt-1\">{t('signInDesc')}</p>\n                </div>\n                \n                <form onSubmit={handleSignIn} className=\"space-y-4\">\n                  <div>\n                    <label htmlFor=\"username\" className=\"block text-sm subtitle-font text-gray-700 dark:text-gray-300\">\n                      {t('username')}\n                    </label>\n                    <Input\n                      id=\"username\"\n                      name=\"username\"\n                      type=\"text\"\n                      required\n                      className=\"mt-1\"\n                      placeholder={t('enterUsername')}\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                    />\n                  </div>\n                  \n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={loginMutation.isPending}\n                  >\n                    <LogIn className=\"h-4 w-4 mr-2\" />\n                    {loginMutation.isPending ? t('signingIn') : t('signIn')}\n                  </Button>\n                </form>\n              </TabsContent>\n              \n              <TabsContent value=\"signup\" className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-xl subtitle-font text-gray-900 dark:text-white\">{t('createAccount')}</h3>\n                  <p className=\"text-sm body-text text-gray-600 dark:text-gray-400 mt-1\">{t('signUpDesc')}</p>\n                </div>\n                \n                <form onSubmit={handleSignUp} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"signup-username\">{t('chooseUsername')}</Label>\n                    <Input\n                      id=\"signup-username\"\n                      name=\"signup-username\"\n                      type=\"text\"\n                      required\n                      className=\"mt-1\"\n                      placeholder={t('enterNewUsername')}\n                      value={signUpData.username}\n                      onChange={(e) => setSignUpData(prev => ({ ...prev, username: e.target.value }))}\n                    />\n                  </div>\n\n\n\n                  <div>\n                    <Label htmlFor=\"signup-phone\">{t('phone')} {t('contactOptional')}</Label>\n                    <Input\n                      id=\"signup-phone\"\n                      name=\"signup-phone\"\n                      type=\"tel\"\n                      className=\"mt-1\"\n                      placeholder={t('enterPhone')}\n                      value={signUpData.phone}\n                      onChange={(e) => setSignUpData(prev => ({ ...prev, phone: e.target.value }))}\n                    />\n                  </div>\n                  \n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={signUpMutation.isPending}\n                  >\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                    {signUpMutation.isPending ? t('creatingAccount') : t('createAccount')}\n                  </Button>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"admin\" className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Admin Login</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Access the admin panel</p>\n                </div>\n                \n                <form onSubmit={handleAdminLogin} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"admin-password\">Admin Password</Label>\n                    <Input\n                      id=\"admin-password\"\n                      name=\"admin-password\"\n                      type=\"password\"\n                      required\n                      className=\"mt-1\"\n                      placeholder=\"Enter admin password\"\n                      value={adminPassword}\n                      onChange={(e) => setAdminPassword(e.target.value)}\n                    />\n                  </div>\n                  \n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={adminLoginMutation.isPending}\n                  >\n                    <LogIn className=\"h-4 w-4 mr-2\" />\n                    {adminLoginMutation.isPending ? \"Logging in...\" : \"Admin Login\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10000},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/participants.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Car, MapPin, Users2 } from \"lucide-react\";\nimport { useLanguage } from \"@/components/language-provider\";\n\ninterface ParticipantsProps {\n  onNavigate: (view: string) => void;\n}\n\nexport function Participants({ onNavigate }: ParticipantsProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dayFilter, setDayFilter] = useState(\"\");\n  const [rideFilter, setRideFilter] = useState(\"\");\n  const { t } = useLanguage();\n\n  const { data: participantsData, isLoading } = useQuery({\n    queryKey: ['/api/participants'],\n  });\n\n  const { data: ridesData } = useQuery({\n    queryKey: ['/api/rides'],\n  });\n\n  const { data: requestsData } = useQuery({\n    queryKey: ['/api/ride-requests'],\n  });\n\n  const participants = (participantsData as any)?.participants || [];\n  const rides = (ridesData as any)?.rides || [];\n  const requests = (requestsData as any)?.requests || [];\n\n  const getRideStatus = (participant: any) => {\n    // Check if user is offering a ride\n    const offeringRide = rides.find((ride: any) => ride.driverId === participant.id);\n    if (offeringRide) {\n      return {\n        status: \"offering\",\n        label: t('offeringRide'),\n        color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n        details: `${offeringRide.departure} → ${offeringRide.destination}`\n      };\n    }\n\n    // Check if user has requested a ride\n    const requestingRide = requests.find((request: any) => request.requesterId === participant.id);\n    if (requestingRide) {\n      return {\n        status: \"requesting\",\n        label: t('requestingRide'),\n        color: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\",\n        details: `${requestingRide.departure} → ${requestingRide.destination}`\n      };\n    }\n\n    // Check if user has joined a ride\n    const joinedRide = rides.find((ride: any) => \n      ride.passengers && ride.passengers.some((p: any) => p.id === participant.id)\n    );\n    if (joinedRide) {\n      return {\n        status: \"passenger\",\n        label: t('joinedRide'),\n        color: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n        details: `with ${joinedRide.driverUsername}`\n      };\n    }\n\n    return {\n      status: \"none\",\n      label: t('noRideCoordination'),\n      color: \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\",\n      details: \"\"\n    };\n  };\n\n  const filteredParticipants = participants.filter((participant: any) => {\n    const matchesSearch = participant.username.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    let matchesDay = true;\n    if (dayFilter && dayFilter !== 'all') {\n      const attendance = participant.attendance;\n      if (!attendance) {\n        matchesDay = false;\n      } else {\n        switch (dayFilter) {\n          case 'day1':\n            matchesDay = attendance.day1Breakfast || attendance.day1Lunch || attendance.day1Dinner || attendance.day1Night;\n            break;\n          case 'day2':\n            matchesDay = attendance.day2Breakfast || attendance.day2Lunch || attendance.day2Dinner || attendance.day2Night;\n            break;\n          case 'day3':\n            matchesDay = attendance.day3Breakfast || attendance.day3Lunch || attendance.day3Dinner || attendance.day3Night;\n            break;\n        }\n      }\n    }\n    \n    let matchesRide = true;\n    if (rideFilter && rideFilter !== 'all') {\n      const rideStatus = getRideStatus(participant);\n      matchesRide = rideStatus.status === rideFilter;\n    }\n    \n    return matchesSearch && matchesDay && matchesRide;\n  });\n\n  const getAttendingDays = (attendance: any) => {\n    if (!attendance) return [];\n    \n    const days = [];\n    if (attendance.day1Breakfast || attendance.day1Lunch || attendance.day1Dinner || attendance.day1Night) {\n      days.push('Aug 28');\n    }\n    if (attendance.day2Breakfast || attendance.day2Lunch || attendance.day2Dinner || attendance.day2Night) {\n      days.push('Aug 29');\n    }\n    if (attendance.day3Breakfast || attendance.day3Lunch || attendance.day3Dinner || attendance.day3Night) {\n      days.push('Aug 30');\n    }\n    \n    return days;\n  };\n\n  const getDietaryRestrictions = (attendance: any) => {\n    if (!attendance) return [];\n    \n    const restrictions = [];\n    if (attendance.omnivore) restrictions.push('Omnivore');\n    if (attendance.vegetarian) restrictions.push('Vegetarian');\n    if (attendance.vegan) restrictions.push('Vegan');\n    if (attendance.glutenFree) restrictions.push('Gluten-free');\n    if (attendance.dairyFree) restrictions.push('Dairy-free');\n    \n    // Default to vegan if nothing is specified\n    if (restrictions.length === 0) {\n      restrictions.push('Vegan');\n    }\n    \n    return restrictions;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"animate-pulse space-y-8\">\n          <div className=\"space-y-2\">\n            <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3\"></div>\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n          </div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{t('participants')}</h2>\n        <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n          {t('participantsSubtitle')}\n        </p>\n      </div>\n\n      {/* Filters */}\n      <div className=\"mb-6 flex flex-col sm:flex-row gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder={t('searchParticipants')}\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        \n        <Select value={dayFilter} onValueChange={setDayFilter}>\n          <SelectTrigger className=\"w-full sm:w-48\">\n            <SelectValue placeholder={t('filterByDay')} />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">{t('allDays')}</SelectItem>\n            <SelectItem value=\"day1\">Wednesday, Aug 28</SelectItem>\n            <SelectItem value=\"day2\">Thursday, Aug 29</SelectItem>\n            <SelectItem value=\"day3\">Friday, Aug 30</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select value={rideFilter} onValueChange={setRideFilter}>\n          <SelectTrigger className=\"w-full sm:w-48\">\n            <SelectValue placeholder={t('filterByRide')} />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">{t('allRideStatuses')}</SelectItem>\n            <SelectItem value=\"offering\">{t('offeringRide')}</SelectItem>\n            <SelectItem value=\"requesting\">{t('requestingRide')}</SelectItem>\n            <SelectItem value=\"passenger\">{t('joinedRide')}</SelectItem>\n            <SelectItem value=\"none\">{t('noRideCoordination')}</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Participants Count */}\n      <div className=\"mb-6\">\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          {t('showingParticipants')} {filteredParticipants.length} / {participants.length}\n        </p>\n      </div>\n\n      {/* Participants List */}\n      <div className=\"space-y-4\">\n        {filteredParticipants.map((participant: any) => {\n          const attendingDays = getAttendingDays(participant.attendance);\n          const dietaryRestrictions = getDietaryRestrictions(participant.attendance);\n          const rideStatus = getRideStatus(participant);\n\n          return (\n            <Card key={participant.id} className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-3\">\n                      <h3 \n                        className=\"text-lg font-semibold text-primary hover:text-primary/80 cursor-pointer transition-colors\"\n                        onClick={() => onNavigate(`profile/${participant.id}`)}\n                      >\n                        {participant.username}\n                      </h3>\n                      {participant.isAdmin && (\n                        <Badge className=\"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\">\n                          Admin\n                        </Badge>\n                      )}\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      {/* Attending Days */}\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-2\">\n                          {t('attendingDays')}\n                        </p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {attendingDays.length > 0 ? (\n                            attendingDays.map((day, index) => (\n                              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                {day}\n                              </Badge>\n                            ))\n                          ) : (\n                            <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                              {t('noAttendance')}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Ride Coordination */}\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-2\">\n                          <Car className=\"h-4 w-4 inline mr-1\" />\n                          {t('rideCoordination')}\n                        </p>\n                        <div className=\"flex flex-col gap-1\">\n                          <Badge className={rideStatus.color}>\n                            {rideStatus.label}\n                          </Badge>\n                          {rideStatus.details && (\n                            <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                              {rideStatus.details}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Dietary Restrictions */}\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-2\">\n                          {t('dietary')}\n                        </p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {dietaryRestrictions.map((restriction, index) => (\n                            <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                              {restriction}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {filteredParticipants.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Users2 className=\"mx-auto h-12 w-12 text-gray-400 dark:text-gray-600\" />\n          <h3 className=\"mt-4 text-lg font-medium text-gray-900 dark:text-white\">\n            {t('noParticipantsFound')}\n          </h3>\n          <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-400\">\n            {t('noParticipantsFoundDesc')}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12396},"client/src/pages/rides.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Car, Plus, MapPin, Clock, Users, MessageSquare, Calendar, User, Edit, Bell, ChevronDown, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/components/language-provider\";\nimport type { Ride, RideRequest, InsertRide, InsertRideRequest } from \"@shared/schema\";\n\nexport function Rides() {\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const [showOfferDialog, setShowOfferDialog] = useState(false);\n  const [showRequestDialog, setShowRequestDialog] = useState(false);\n  const [editingRide, setEditingRide] = useState<any>(null);\n  const [showModifyDialog, setShowModifyDialog] = useState(false);\n\n  const { data: ridesData } = useQuery({\n    queryKey: ['/api/rides'],\n  });\n\n  const { data: requestsData } = useQuery({\n    queryKey: ['/api/ride-requests'],\n  });\n\n  const { data: authData } = useQuery({\n    queryKey: ['/api/auth/me'],\n  });\n\n  const rides = (ridesData as any)?.rides || [];\n  const requests = (requestsData as any)?.requests || [];\n  const currentUser = (authData as any)?.user;\n\n  const offerRideMutation = useMutation({\n    mutationFn: (rideData: InsertRide) => apiRequest('POST', '/api/rides', rideData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/rides'] });\n      setShowOfferDialog(false);\n      toast({\n        title: \"Success\",\n        description: \"Ride offer created successfully!\",\n      });\n    },\n  });\n\n  const requestRideMutation = useMutation({\n    mutationFn: (requestData: InsertRideRequest) => apiRequest('POST', '/api/ride-requests', requestData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/ride-requests'] });\n      setShowRequestDialog(false);\n      toast({\n        title: \"Success\",\n        description: \"Ride request created successfully!\",\n      });\n    },\n  });\n\n  const modifyRideMutation = useMutation({\n    mutationFn: ({ rideId, updates }: { rideId: number; updates: Partial<InsertRide> }) => \n      apiRequest('PUT', `/api/rides/${rideId}`, updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/rides'] });\n      setShowModifyDialog(false);\n      setEditingRide(null);\n      toast({\n        title: \"Success\",\n        description: \"Ride updated successfully! Passengers have been notified.\",\n      });\n    },\n  });\n\n  const deleteRideMutation = useMutation({\n    mutationFn: (rideId: number) => apiRequest('DELETE', `/api/rides/${rideId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/rides'] });\n      toast({\n        title: \"Success\",\n        description: \"Ride deleted successfully!\",\n      });\n    },\n  });\n\n  const deleteRequestMutation = useMutation({\n    mutationFn: (requestId: number) => apiRequest('DELETE', `/api/ride-requests/${requestId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/ride-requests'] });\n      toast({\n        title: \"Success\", \n        description: \"Ride request deleted successfully!\",\n      });\n    },\n  });\n\n  const joinRequestMutation = useMutation({\n    mutationFn: ({ rideId, message }: { rideId: number; message: string }) => \n      apiRequest('POST', `/api/rides/${rideId}/request-join`, { message }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/rides'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/ride-join-status'] });\n      toast({\n        title: \"Success\",\n        description: \"Join request sent successfully!\",\n      });\n    },\n  });\n\n  const { data: joinRequestsData } = useQuery({\n    queryKey: ['/api/rides/join-requests'],\n  });\n\n  const { data: userJoinStatusData } = useQuery({\n    queryKey: ['/api/ride-join-status'],\n  });\n\n  const { data: rideInvitationsData } = useQuery({\n    queryKey: ['/api/ride-invitations'],\n  });\n\n  const joinRequests = (joinRequestsData as any)?.requests || [];\n  const userJoinRequests = (userJoinStatusData as any)?.joinRequests || [];\n  const rideInvitations = (rideInvitationsData as any)?.invitations || [];\n\n  const respondToJoinRequestMutation = useMutation({\n    mutationFn: ({ requestId, status }: { requestId: number; status: string }) => \n      apiRequest('POST', `/api/rides/join-requests/${requestId}/respond`, { status }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/rides/join-requests'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/rides'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/ride-join-status'] });\n      toast({\n        title: \"Success\",\n        description: \"Response sent successfully!\",\n      });\n    },\n  });\n\n  const respondToRideInvitationMutation = useMutation({\n    mutationFn: ({ invitationId, status }: { invitationId: number; status: string }) => \n      apiRequest('PUT', `/api/ride-invitations/${invitationId}/respond`, { status }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/ride-invitations'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/rides'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/ride-join-status'] });\n      toast({\n        title: \"Success\",\n        description: \"Response sent successfully!\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">{t('ridesTitle')}</h1>\n        <div className=\"flex space-x-4\">\n          <Dialog open={showOfferDialog} onOpenChange={setShowOfferDialog}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                {t('offerRide')}\n              </Button>\n            </DialogTrigger>\n            <OfferRideDialog \n              onSubmit={(data) => offerRideMutation.mutate(data)}\n              isLoading={offerRideMutation.isPending}\n            />\n          </Dialog>\n\n          <Dialog open={showRequestDialog} onOpenChange={setShowRequestDialog}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                {t('requestRide')}\n              </Button>\n            </DialogTrigger>\n            <RequestRideDialog \n              onSubmit={(data) => requestRideMutation.mutate(data)}\n              isLoading={requestRideMutation.isPending}\n            />\n          </Dialog>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"available\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"available\">{t('availableRides')}</TabsTrigger>\n          <TabsTrigger value=\"requests\">{t('requestedRides')}</TabsTrigger>\n          <TabsTrigger value=\"join-requests\">{t('joinRequests')}</TabsTrigger>\n          <TabsTrigger value=\"invitations\" className=\"relative\">\n            Ride Invitations\n            {rideInvitations.filter((inv: any) => inv.status === 'pending').length > 0 && (\n              <div className=\"absolute -top-1 -right-1 bg-ff-primary text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                {rideInvitations.filter((inv: any) => inv.status === 'pending').length}\n              </div>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"my-requests\">{t('myRequests')}</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"available\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {rides.map((ride: Ride & { driver: any }) => (\n              <RideCard \n                key={ride.id} \n                ride={ride} \n                onRequestJoin={(message) => joinRequestMutation.mutate({ rideId: ride.id, message })}\n                isRequestingJoin={joinRequestMutation.isPending}\n                currentUser={currentUser}\n                onModifyRide={(ride) => {\n                  setEditingRide(ride);\n                  setShowModifyDialog(true);\n                }}\n              />\n            ))}\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"requests\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {requests.map((request: RideRequest & { requester: any }) => (\n              <RequestCard \n                key={request.id} \n                request={request}\n                currentUser={currentUser}\n                userRides={rides.filter((ride: any) => ride.driverId === currentUser?.id)}\n                onOfferRide={async (requestId, selectedRideId) => {\n                  // Send invitation to join specific ride\n                  if (selectedRideId) {\n                    try {\n                      await apiRequest('POST', `/api/rides/${selectedRideId}/invite`, {\n                        userId: request.requesterId,\n                        message: `You've been invited to join this ride based on your request from ${request.departure} to ${request.destination}`\n                      });\n                      \n                      // Update the request status to indicate an offer was made\n                      await apiRequest('PUT', `/api/ride-requests/${requestId}`, {\n                        status: 'offered'\n                      });\n                      \n                      queryClient.invalidateQueries({ queryKey: ['/api/ride-requests'] });\n                      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n                      queryClient.invalidateQueries({ queryKey: ['/api/ride-invitations'] });\n                      \n                      toast({\n                        title: \"Success\",\n                        description: `Ride offer sent to ${request.requester.username}!`\n                      });\n                    } catch (error) {\n                      console.error('Error sending ride offer:', error);\n                      toast({\n                        title: \"Error\",\n                        description: \"Failed to send ride offer. Please try again.\"\n                      });\n                    }\n                  }\n                }}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"join-requests\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {joinRequests.map((request: any) => (\n              <JoinRequestCard \n                key={request.id} \n                request={request} \n                onRespond={(status) => respondToJoinRequestMutation.mutate({ requestId: request.id, status })}\n                isResponding={respondToJoinRequestMutation.isPending}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"invitations\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {rideInvitations.map((invitation: any) => (\n              <RideInvitationCard \n                key={invitation.id} \n                invitation={invitation} \n                onRespond={(status) => respondToRideInvitationMutation.mutate({ invitationId: invitation.id, status })}\n                isResponding={respondToRideInvitationMutation.isPending}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"my-requests\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {userJoinRequests.map((request: any) => (\n              <UserJoinRequestCard \n                key={request.id} \n                request={request} \n              />\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Modify Ride Dialog */}\n      <Dialog open={showModifyDialog} onOpenChange={setShowModifyDialog}>\n        <DialogContent className=\"sm:max-w-[425px] scrollable-popup\">\n          <DialogHeader>\n            <DialogTitle>{t('modifyRide')}</DialogTitle>\n            <DialogDescription>\n              Update your ride details and notify passengers\n            </DialogDescription>\n          </DialogHeader>\n          {editingRide && (\n            <ModifyRideDialog\n              ride={editingRide}\n              onSubmit={(updates) => {\n                modifyRideMutation.mutate({\n                  rideId: editingRide.id,\n                  updates\n                });\n              }}\n              isLoading={modifyRideMutation.isPending}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction ModifyRideDialog({ ride, onSubmit, isLoading }: { \n  ride: any; \n  onSubmit: (updates: Partial<InsertRide>) => void; \n  isLoading: boolean \n}) {\n  const { t } = useLanguage();\n  const [departure, setDeparture] = useState(ride.departure);\n  const [destination, setDestination] = useState(ride.destination);\n  const [departureTime, setDepartureTime] = useState(ride.departureTime);\n  const [totalSeats, setTotalSeats] = useState(ride.totalSeats);\n  const [notes, setNotes] = useState(ride.notes || '');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit({\n      departure,\n      destination,\n      departureTime,\n      totalSeats: parseInt(totalSeats),\n      availableSeats: parseInt(totalSeats) - (ride.totalSeats - ride.availableSeats),\n      notes\n    });\n  };\n\n  return (\n    <div className=\"scrollable-popup\">\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"departure\">{t('departure')}</Label>\n        <Input\n          id=\"departure\"\n          value={departure}\n          onChange={(e) => setDeparture(e.target.value)}\n          required\n        />\n      </div>\n      \n      <div>\n        <Label htmlFor=\"destination\">{t('destination')}</Label>\n        <Input\n          id=\"destination\"\n          value={destination}\n          onChange={(e) => setDestination(e.target.value)}\n          required\n        />\n      </div>\n      \n      <div>\n        <Label htmlFor=\"departureTime\">{t('departureTime')}</Label>\n        <Input\n          id=\"departureTime\"\n          type=\"time\"\n          value={departureTime}\n          onChange={(e) => setDepartureTime(e.target.value)}\n          required\n        />\n      </div>\n      \n      <div>\n        <Label htmlFor=\"totalSeats\">{t('totalSeats')}</Label>\n        <Input\n          id=\"totalSeats\"\n          type=\"number\"\n          min=\"1\"\n          max=\"8\"\n          value={totalSeats}\n          onChange={(e) => setTotalSeats(e.target.value)}\n          required\n        />\n      </div>\n      \n      <div>\n        <Label htmlFor=\"notes\">{t('notes')}</Label>\n        <Textarea\n          id=\"notes\"\n          value={notes}\n          onChange={(e) => setNotes(e.target.value)}\n          placeholder={t('additionalNotes')}\n        />\n      </div>\n      \n        <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\n          {isLoading ? t('loading') : t('save')}\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nfunction RideCard({ ride, onRequestJoin, isRequestingJoin, currentUser, onModifyRide }: { \n  ride: Ride & { driver: any }, \n  onRequestJoin: (message: string) => void, \n  isRequestingJoin: boolean,\n  currentUser?: any,\n  onModifyRide?: (ride: any) => void\n}) {\n  const { t } = useLanguage();\n  const [showJoinDialog, setShowJoinDialog] = useState(false);\n  const [joinMessage, setJoinMessage] = useState(\"\");\n\n  const handleRequestJoin = () => {\n    if (ride.tripType === 'arrival') {\n      setShowJoinDialog(true);\n    } else {\n      onRequestJoin(joinMessage);\n    }\n  };\n\n  const handleConfirmJoin = () => {\n    onRequestJoin(joinMessage);\n    setShowJoinDialog(false);\n    setJoinMessage(\"\");\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between text-lg\">\n            <div className=\"flex items-center\">\n              <Car className=\"h-5 w-5 mr-2\" />\n              {ride.driver.username}\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {ride.tripType === 'arrival' && (\n                <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded\">Arrival</span>\n              )}\n              {ride.tripType === 'departure' && (\n                <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded\">Departure</span>\n              )}\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n            <MapPin className=\"h-4 w-4 mr-1\" />\n            {ride.departure} → {ride.destination}\n          </div>\n          \n          <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n            <Clock className=\"h-4 w-4 mr-1\" />\n            {ride.departureTime}\n          </div>\n          \n          <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n            <Users className=\"h-4 w-4 mr-1\" />\n            {ride.availableSeats}/{ride.totalSeats} {t('seats')}\n          </div>\n\n          <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n            <Calendar className=\"h-4 w-4 mr-1\" />\n            {ride.eventDay === 'day1' ? 'Aug 28' : ride.eventDay === 'day2' ? 'Aug 29' : 'Aug 30'}\n          </div>\n\n          {(ride as any).passengers && (ride as any).passengers.length > 0 && (\n            <div className=\"text-sm\">\n              <p className=\"text-gray-600 dark:text-gray-400 mb-1\">Passengers:</p>\n              <div className=\"flex flex-wrap gap-1\">\n                {(ride as any).passengers.map((passenger: any) => (\n                  <span \n                    key={passenger.id}\n                    className=\"px-2 py-1 bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded text-xs\"\n                  >\n                    {passenger.username}\n                  </span>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {ride.notes && (\n            <div className=\"flex items-start text-sm text-gray-600 dark:text-gray-400\">\n              <MessageSquare className=\"h-4 w-4 mr-1 mt-0.5\" />\n              <span className=\"text-xs\">{ride.notes}</span>\n            </div>\n          )}\n          \n          <div className=\"flex gap-2\">\n            {currentUser && ride.driver.id === currentUser.id && onModifyRide && (\n              <Button\n                variant=\"outline\"\n                onClick={() => onModifyRide(ride)}\n                className=\"text-ff-primary border-ff-primary hover:bg-ff-primary hover:text-white\"\n                size=\"sm\"\n              >\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n            )}\n            {currentUser && ride.driver.id === currentUser.id && onModifyRide && (\n              <Button\n                variant=\"destructive\"\n                onClick={async () => {\n                  if (window.confirm(t('deleteRideConfirm'))) {\n                    try {\n                      await apiRequest('DELETE', `/api/rides/${ride.id}`);\n                      queryClient.invalidateQueries({ queryKey: ['/api/rides'] });\n                    } catch (error) {\n                      console.error('Error deleting ride:', error);\n                    }\n                  }\n                }}\n                size=\"sm\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            )}\n            {(!currentUser || ride.driver.id !== currentUser.id) && (\n              <Button \n                onClick={handleRequestJoin} \n                disabled={isRequestingJoin || ride.availableSeats === 0}\n                className=\"flex-1\"\n                size=\"sm\"\n              >\n                {ride.availableSeats === 0 ? t('full') : t('requestToJoin')}\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Dialog open={showJoinDialog} onOpenChange={setShowJoinDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>{t('requestToJoin')}</DialogTitle>\n            <DialogDescription>\n              {t('sendJoinRequestDescription')}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              <p><strong>Trip:</strong> {ride.tripType === 'arrival' ? 'Arrival' : 'Departure'}</p>\n              <p><strong>Route:</strong> {ride.departure} → Massello</p>\n              <p><strong>Time:</strong> {ride.departureTime}</p>\n              <p><strong>Driver:</strong> {ride.driver.username}</p>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"join-message\">{t('joinMessage')}</Label>\n              <Textarea\n                id=\"join-message\"\n                value={joinMessage}\n                onChange={(e) => setJoinMessage(e.target.value)}\n                placeholder={t('joinMessagePlaceholder')}\n                className=\"mt-1\"\n              />\n            </div>\n            \n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" onClick={() => setShowJoinDialog(false)} className=\"w-full\">\n                {t('cancel')}\n              </Button>\n              <Button onClick={handleConfirmJoin} disabled={isRequestingJoin} className=\"w-full\">\n                {t('sendRequest')}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nfunction RequestCard({ request, currentUser, userRides, onOfferRide }: { \n  request: RideRequest & { requester: any },\n  currentUser: any,\n  userRides?: any[],\n  onOfferRide?: (requestId: number, selectedRideId?: number) => void \n}) {\n  const { t } = useLanguage();\n  const [showOfferDialog, setShowOfferDialog] = useState(false);\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between text-lg\">\n            <div className=\"flex items-center\">\n              <User className=\"h-5 w-5 mr-2\" />\n              {request.requester.username}\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {request.tripType === 'arrival' && (\n                <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded\">Arrival</span>\n              )}\n              {request.tripType === 'departure' && (\n                <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded\">Departure</span>\n              )}\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n            <MapPin className=\"h-4 w-4 mr-1\" />\n            {request.departure} → {request.destination}\n          </div>\n          \n          <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n            <Calendar className=\"h-4 w-4 mr-1\" />\n            {request.eventDay === 'day1' ? 'Aug 28' : request.eventDay === 'day2' ? 'Aug 29' : 'Aug 30'}\n          </div>\n          \n          {request.preferredTime && (\n            <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n              <Clock className=\"h-4 w-4 mr-1\" />\n              {request.preferredTime}\n            </div>\n          )}\n          \n          {request.notes && (\n            <div className=\"flex items-start text-sm text-gray-600 dark:text-gray-400\">\n              <MessageSquare className=\"h-4 w-4 mr-1 mt-0.5\" />\n              <span className=\"text-xs\">{request.notes}</span>\n            </div>\n          )}\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-xs text-gray-500 dark:text-gray-500\">\n              Status: <span className={`font-medium ${\n                request.status === 'accepted' ? 'text-green-600' : \n                request.status === 'declined' ? 'text-red-600' : \n                'text-yellow-600'\n              }`}>{request.status}</span>\n            </div>\n            \n            <div className=\"flex space-x-2\">\n              {request.status === 'open' && onOfferRide && (\n                <Button \n                  size=\"sm\" \n                  onClick={() => setShowOfferDialog(true)}\n                  className=\"flex-1\"\n                >\n                  <Car className=\"h-4 w-4 mr-1\" />\n                  {t('offerRide')}\n                </Button>\n              )}\n              {currentUser && request.requesterId === currentUser.id && (\n                <Button\n                  variant=\"destructive\"\n                  onClick={async () => {\n                    if (window.confirm(t('deleteRequestConfirm'))) {\n                      try {\n                        await apiRequest('DELETE', `/api/ride-requests/${request.id}`);\n                        queryClient.invalidateQueries({ queryKey: ['/api/ride-requests'] });\n                      } catch (error) {\n                        console.error('Error deleting request:', error);\n                      }\n                    }\n                  }}\n                  size=\"sm\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Dialog open={showOfferDialog} onOpenChange={setShowOfferDialog}>\n        <DialogContent className=\"sm:max-w-md scrollable-popup\">\n          <DialogHeader>\n            <DialogTitle>Select Ride to Offer to {request.requester.username}</DialogTitle>\n            <DialogDescription>\n              Choose one of your existing rides that matches this request\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              <p><strong>Requested Route:</strong> {request.departure} → {request.destination}</p>\n              <p><strong>Trip Type:</strong> {request.tripType === 'arrival' ? 'Arrival' : 'Departure'}</p>\n              <p><strong>Day:</strong> {request.eventDay === 'day1' ? 'Aug 28' : request.eventDay === 'day2' ? 'Aug 29' : 'Aug 30'}</p>\n              {request.preferredTime && <p><strong>Preferred Time:</strong> {request.preferredTime}</p>}\n            </div>\n            \n            {userRides && userRides.length > 0 ? (\n              <div className=\"space-y-3\">\n                <p className=\"text-sm font-secondary-title\">{t('selectRide')}:</p>\n                <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                  {userRides.map((ride: any) => (\n                    <div key={ride.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-secondary-title text-sm\">{ride.departure} → {ride.destination}</p>\n                          <p className=\"text-xs text-gray-500\">{ride.departureTime} • {ride.availableSeats} seats available</p>\n                        </div>\n                        <Button \n                          size=\"sm\"\n                          onClick={() => {\n                            onOfferRide!(request.id, ride.id);\n                            setShowOfferDialog(false);\n                          }}\n                          className=\"ml-2\"\n                        >\n                          {t('selectRide')}\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-4\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                  {t('noRidesAvailable')}\n                </p>\n                <Button \n                  onClick={() => {\n                    setShowOfferDialog(false);\n                    // Navigate to create ride\n                  }}\n                  className=\"w-full\"\n                >\n                  {t('createNewRide')}\n                </Button>\n              </div>\n            )}\n            \n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" onClick={() => setShowOfferDialog(false)} className=\"w-full\">\n                {t('cancel')}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nfunction JoinRequestCard({ request, onRespond, isResponding }: { \n  request: any, \n  onRespond: (status: string) => void, \n  isResponding: boolean \n}) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span>{request.requester.username}</span>\n            <span className=\"text-sm text-gray-500\">wants to join</span>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n          <p><strong>Ride:</strong> {request.ride.departure} → {request.ride.destination}</p>\n          <p><strong>Time:</strong> {request.ride.departureTime}</p>\n          <p><strong>Trip Type:</strong> {request.ride.tripType === 'arrival' ? 'Arrival' : 'Departure'}</p>\n        </div>\n        \n        {request.message && (\n          <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n            <p className=\"text-sm text-gray-700 dark:text-gray-300\">{request.message}</p>\n          </div>\n        )}\n        \n        {request.status === 'pending' && (\n          <div className=\"flex space-x-2\">\n            <Button \n              onClick={() => onRespond('accepted')} \n              disabled={isResponding}\n              className=\"w-full bg-green-600 hover:bg-green-700\"\n              size=\"sm\"\n            >\n              Accept\n            </Button>\n            <Button \n              onClick={() => onRespond('declined')} \n              disabled={isResponding}\n              variant=\"outline\"\n              className=\"w-full\"\n              size=\"sm\"\n            >\n              Decline\n            </Button>\n          </div>\n        )}\n        \n        {request.status !== 'pending' && (\n          <div className=\"text-center text-sm font-medium\">\n            <span className={`px-2 py-1 rounded ${\n              request.status === 'accepted' \n                ? 'bg-green-100 text-green-800' \n                : 'bg-red-100 text-red-800'\n            }`}>\n              {request.status.charAt(0).toUpperCase() + request.status.slice(1)}\n            </span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction OfferRideDialog({ onSubmit, isLoading }: { onSubmit: (data: InsertRide) => void, isLoading: boolean }) {\n  const { t } = useLanguage();\n  const [formData, setFormData] = useState({\n    tripType: 'departure' as 'arrival' | 'departure',\n    eventDay: 'day1' as 'day1' | 'day2' | 'day3',\n    departure: '',\n    destination: 'Massello',\n    departureTime: '',\n    totalSeats: 4,\n    notes: '',\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const rideData = {\n      ...formData,\n      availableSeats: formData.totalSeats,\n      driverId: 0, // This will be set by the backend\n    };\n    \n    // Adjust departure/destination based on trip type\n    if (formData.tripType === 'arrival') {\n      rideData.destination = 'Massello';\n    } else {\n      rideData.departure = 'Massello';\n    }\n    \n    onSubmit(rideData);\n  };\n\n  return (\n    <DialogContent className=\"sm:max-w-md\">\n      <DialogHeader>\n        <DialogTitle>{t('offerRide')}</DialogTitle>\n        <DialogDescription>\n          {t('offerRideDescription')}\n        </DialogDescription>\n      </DialogHeader>\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label>Trip Type</Label>\n          <div className=\"flex space-x-4 mt-2\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                name=\"tripType\"\n                value=\"departure\"\n                checked={formData.tripType === 'departure'}\n                onChange={(e) => setFormData(prev => ({ \n                  ...prev, \n                  tripType: e.target.value as 'departure',\n                  departure: e.target.value === 'departure' ? 'Massello' : '',\n                  destination: e.target.value === 'departure' ? '' : 'Massello'\n                }))}\n                className=\"mr-2\"\n              />\n              Departure from Massello\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                name=\"tripType\"\n                value=\"arrival\"\n                checked={formData.tripType === 'arrival'}\n                onChange={(e) => setFormData(prev => ({ \n                  ...prev, \n                  tripType: e.target.value as 'arrival',\n                  departure: e.target.value === 'arrival' ? '' : 'Massello',\n                  destination: e.target.value === 'arrival' ? 'Massello' : ''\n                }))}\n                className=\"mr-2\"\n              />\n              Arrival to Massello\n            </label>\n          </div>\n        </div>\n\n        <div>\n          <Label>Event Day</Label>\n          <div className=\"flex space-x-4 mt-2\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                name=\"eventDay\"\n                value=\"day1\"\n                checked={formData.eventDay === 'day1'}\n                onChange={(e) => setFormData(prev => ({ ...prev, eventDay: e.target.value as 'day1' }))}\n                className=\"mr-2\"\n              />\n              Aug 28\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                name=\"eventDay\"\n                value=\"day2\"\n                checked={formData.eventDay === 'day2'}\n                onChange={(e) => setFormData(prev => ({ ...prev, eventDay: e.target.value as 'day2' }))}\n                className=\"mr-2\"\n              />\n              Aug 29\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                name=\"eventDay\"\n                value=\"day3\"\n                checked={formData.eventDay === 'day3'}\n                onChange={(e) => setFormData(prev => ({ ...prev, eventDay: e.target.value as 'day3' }))}\n                className=\"mr-2\"\n              />\n              Aug 30\n            </label>\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"location\">\n            {formData.tripType === 'departure' ? 'Destination' : 'Departure Location'}\n          </Label>\n          <Input\n            id=\"location\"\n            value={formData.tripType === 'departure' ? formData.destination : formData.departure}\n            onChange={(e) => setFormData(prev => ({ \n              ...prev, \n              [formData.tripType === 'departure' ? 'destination' : 'departure']: e.target.value \n            }))}\n            placeholder={formData.tripType === 'departure' ? 'Where to?' : 'Where from?'}\n            required\n          />\n        </div>\n\n        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n          <p><strong>Route:</strong> {formData.tripType === 'departure' ? `Massello → ${formData.destination || '[Destination]'}` : `${formData.departure || '[Origin]'} → Massello`}</p>\n        </div>\n        \n        <div>\n          <Label htmlFor=\"departureTime\">{t('time')}</Label>\n          <Input\n            id=\"departureTime\"\n            value={formData.departureTime}\n            onChange={(e) => setFormData(prev => ({ ...prev, departureTime: e.target.value }))}\n            placeholder=\"e.g., 9:00 AM\"\n            required\n          />\n        </div>\n        \n        <div>\n          <Label htmlFor=\"totalSeats\">{t('seats')}</Label>\n          <Input\n            id=\"totalSeats\"\n            type=\"number\"\n            min=\"1\"\n            max=\"8\"\n            value={formData.totalSeats}\n            onChange={(e) => setFormData(prev => ({ ...prev, totalSeats: parseInt(e.target.value) }))}\n            required\n          />\n        </div>\n        \n        <div>\n          <Label htmlFor=\"notes\">{t('notes')}</Label>\n          <Textarea\n            id=\"notes\"\n            value={formData.notes}\n            onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n            placeholder=\"Additional information...\"\n          />\n        </div>\n        \n        <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\n          {isLoading ? t('loading') : t('offerRide')}\n        </Button>\n      </form>\n    </DialogContent>\n  );\n}\n\nfunction RequestRideDialog({ onSubmit, isLoading }: { onSubmit: (data: InsertRideRequest) => void, isLoading: boolean }) {\n  const { t } = useLanguage();\n  const [formData, setFormData] = useState({\n    tripType: 'departure' as 'arrival' | 'departure',\n    eventDay: 'day1' as 'day1' | 'day2' | 'day3',\n    departure: '',\n    destination: 'Massello',\n    preferredTime: '',\n    notes: '',\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const requestData = {\n      ...formData,\n      requesterId: 0, // This will be set by the backend\n      rideId: null,\n    };\n    \n    // Adjust departure/destination based on trip type\n    if (formData.tripType === 'arrival') {\n      requestData.destination = 'Massello';\n    } else {\n      requestData.departure = 'Massello';\n    }\n    \n    onSubmit(requestData);\n  };\n\n  return (\n    <DialogContent className=\"sm:max-w-md\">\n      <DialogHeader>\n        <DialogTitle>{t('requestRide')}</DialogTitle>\n        <DialogDescription>\n          {t('requestRideDescription')}\n        </DialogDescription>\n      </DialogHeader>\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label>Trip Type</Label>\n          <div className=\"flex space-x-4 mt-2\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                name=\"tripType\"\n                value=\"departure\"\n                checked={formData.tripType === 'departure'}\n                onChange={(e) => setFormData(prev => ({ \n                  ...prev, \n                  tripType: e.target.value as 'departure',\n                  departure: e.target.value === 'departure' ? 'Massello' : '',\n                  destination: e.target.value === 'departure' ? '' : 'Massello'\n                }))}\n                className=\"mr-2\"\n              />\n              Departure from Massello\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                name=\"tripType\"\n                value=\"arrival\"\n                checked={formData.tripType === 'arrival'}\n                onChange={(e) => setFormData(prev => ({ \n                  ...prev, \n                  tripType: e.target.value as 'arrival',\n                  departure: e.target.value === 'arrival' ? '' : 'Massello',\n                  destination: e.target.value === 'arrival' ? 'Massello' : ''\n                }))}\n                className=\"mr-2\"\n              />\n              Arrival to Massello\n            </label>\n          </div>\n        </div>\n\n        <div>\n          <Label>Event Day</Label>\n          <div className=\"flex space-x-4 mt-2\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                name=\"eventDay\"\n                value=\"day1\"\n                checked={formData.eventDay === 'day1'}\n                onChange={(e) => setFormData(prev => ({ ...prev, eventDay: e.target.value as 'day1' }))}\n                className=\"mr-2\"\n              />\n              Aug 28\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                name=\"eventDay\"\n                value=\"day2\"\n                checked={formData.eventDay === 'day2'}\n                onChange={(e) => setFormData(prev => ({ ...prev, eventDay: e.target.value as 'day2' }))}\n                className=\"mr-2\"\n              />\n              Aug 29\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"radio\"\n                name=\"eventDay\"\n                value=\"day3\"\n                checked={formData.eventDay === 'day3'}\n                onChange={(e) => setFormData(prev => ({ ...prev, eventDay: e.target.value as 'day3' }))}\n                className=\"mr-2\"\n              />\n              Aug 30\n            </label>\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"location\">\n            {formData.tripType === 'departure' ? 'Destination' : 'Departure Location'}\n          </Label>\n          <Input\n            id=\"location\"\n            value={formData.tripType === 'departure' ? formData.destination : formData.departure}\n            onChange={(e) => setFormData(prev => ({ \n              ...prev, \n              [formData.tripType === 'departure' ? 'destination' : 'departure']: e.target.value \n            }))}\n            placeholder={formData.tripType === 'departure' ? 'Where to?' : 'Where from?'}\n            required\n          />\n        </div>\n\n        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n          <p><strong>Route:</strong> {formData.tripType === 'departure' ? `Massello → ${formData.destination || '[Destination]'}` : `${formData.departure || '[Origin]'} → Massello`}</p>\n        </div>\n        \n        <div>\n          <Label htmlFor=\"preferredTime\">{t('time')}</Label>\n          <Input\n            id=\"preferredTime\"\n            value={formData.preferredTime}\n            onChange={(e) => setFormData(prev => ({ ...prev, preferredTime: e.target.value }))}\n            placeholder=\"e.g., 9:00 AM\"\n          />\n        </div>\n        \n        <div>\n          <Label htmlFor=\"notes\">{t('notes')}</Label>\n          <Textarea\n            id=\"notes\"\n            value={formData.notes}\n            onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n            placeholder=\"Additional information...\"\n          />\n        </div>\n        \n        <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\n          {isLoading ? t('loading') : t('requestRide')}\n        </Button>\n      </form>\n    </DialogContent>\n  );\n}\n\nfunction UserJoinRequestCard({ request }: { request: any }) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted': return 'text-green-600 bg-green-100';\n      case 'declined': return 'text-red-600 bg-red-100';\n      default: return 'text-yellow-600 bg-yellow-100';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'accepted': return 'Accepted';\n      case 'declined': return 'Declined';\n      default: return 'Pending';\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span>Request to Join</span>\n            <span className={`text-xs px-2 py-1 rounded ${getStatusColor(request.status)}`}>\n              {getStatusText(request.status)}\n            </span>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n          <p><strong>Driver:</strong> {request.ride.driver.username}</p>\n          <p><strong>Route:</strong> {request.ride.departure} → {request.ride.destination}</p>\n          <p><strong>Time:</strong> {request.ride.departureTime}</p>\n          <p><strong>Trip Type:</strong> {request.ride.tripType === 'arrival' ? 'Arrival' : 'Departure'}</p>\n          <p><strong>Day:</strong> {request.ride.eventDay === 'day1' ? 'Aug 28' : request.ride.eventDay === 'day2' ? 'Aug 29' : 'Aug 30'}</p>\n        </div>\n        \n        {request.message && (\n          <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n            <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n              <strong>Your message:</strong> {request.message}\n            </p>\n          </div>\n        )}\n        \n        {request.respondedAt && (\n          <div className=\"text-xs text-gray-500 dark:text-gray-500\">\n            Response received: {new Date(request.respondedAt).toLocaleDateString()}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction RideInvitationCard({ invitation, onRespond, isResponding }: { \n  invitation: any; \n  onRespond: (status: string) => void; \n  isResponding: boolean \n}) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted': return 'text-green-600 bg-green-100';\n      case 'declined': return 'text-red-600 bg-red-100';\n      default: return 'text-yellow-600 bg-yellow-100';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'accepted': return 'Accepted';\n      case 'declined': return 'Declined';\n      default: return 'Pending';\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Car className=\"h-5 w-5 mr-2\" />\n              <span>Ride Offer</span>\n            </div>\n            <span className={`text-xs px-2 py-1 rounded ${getStatusColor(invitation.status)}`}>\n              {getStatusText(invitation.status)}\n            </span>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n          <p><strong>Driver:</strong> {invitation.ride.driver.username}</p>\n          <p><strong>Route:</strong> {invitation.ride.departure} → {invitation.ride.destination}</p>\n          <p><strong>Time:</strong> {invitation.ride.departureTime}</p>\n          <p><strong>Trip Type:</strong> {invitation.ride.tripType === 'arrival' ? 'Arrival' : 'Departure'}</p>\n          <p><strong>Day:</strong> {invitation.ride.eventDay === 'day1' ? 'Aug 28' : invitation.ride.eventDay === 'day2' ? 'Aug 29' : 'Aug 30'}</p>\n          <p><strong>Available Seats:</strong> {invitation.ride.availableSeats}/{invitation.ride.totalSeats}</p>\n        </div>\n        \n        {invitation.ride.notes && (\n          <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n            <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n              <strong>Driver's notes:</strong> {invitation.ride.notes}\n            </p>\n          </div>\n        )}\n        \n        {invitation.status === 'pending' && (\n          <div className=\"flex space-x-2\">\n            <Button \n              onClick={() => onRespond('accepted')} \n              disabled={isResponding}\n              className=\"w-full bg-green-600 hover:bg-green-700\"\n              size=\"sm\"\n            >\n              Accept Offer\n            </Button>\n            <Button \n              onClick={() => onRespond('declined')} \n              disabled={isResponding}\n              variant=\"outline\"\n              className=\"w-full\"\n              size=\"sm\"\n            >\n              Decline\n            </Button>\n          </div>\n        )}\n        \n        {invitation.respondedAt && (\n          <div className=\"text-xs text-gray-500 dark:text-gray-500\">\n            Response sent: {new Date(invitation.respondedAt).toLocaleDateString()}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":48524},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 flex flex-col w-full max-w-lg max-h-[90vh] translate-x-[-50%] translate-y-[-50%] border bg-background shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n        {children}\n      </div>\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 z-10 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3941},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/profile.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, Car, Utensils, Users, MapPin, Clock, Mail, Phone, ArrowLeft } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/components/language-provider\";\n\ninterface ProfileProps {\n  onNavigate: (view: string) => void;\n  userId: string;\n}\n\nexport function Profile({ onNavigate, userId }: ProfileProps) {\n  const { t } = useLanguage();\n  \n  const { data: profileData, isLoading } = useQuery({\n    queryKey: [`/api/users/${userId}`],\n    enabled: !!userId,\n  });\n\n  const { data: attendanceData } = useQuery({\n    queryKey: [`/api/users/${userId}/attendance`],\n    enabled: !!userId,\n  });\n\n  const { data: ridesData } = useQuery({\n    queryKey: ['/api/rides'],\n  });\n\n  const { data: requestsData } = useQuery({\n    queryKey: ['/api/ride-requests'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mb-4\"></div>\n          <div className=\"space-y-4\">\n            <div className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            <div className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const user = (profileData as any)?.user;\n  const attendance = (attendanceData as any)?.attendance;\n  const rides = (ridesData as any)?.rides || [];\n  const requests = (requestsData as any)?.requests || [];\n\n  if (!user) {\n    return (\n      <div className=\"max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-gray-600 dark:text-gray-400\">User not found</p>\n            <Button \n              onClick={() => onNavigate('dashboard')} \n              className=\"mt-4\"\n              variant=\"outline\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getAttendancePeriods = () => {\n    if (!attendance) return [];\n    \n    const events = [];\n    \n    if (attendance.day1Breakfast) events.push({ day: 1, event: 'breakfast', label: 'breakfast Aug 28' });\n    if (attendance.day1Lunch) events.push({ day: 1, event: 'lunch', label: 'lunch Aug 28' });\n    if (attendance.day1Dinner) events.push({ day: 1, event: 'dinner', label: 'dinner Aug 28' });\n    if (attendance.day1Night) events.push({ day: 1, event: 'overnight', label: 'overnight Aug 28-29' });\n    \n    if (attendance.day2Breakfast) events.push({ day: 2, event: 'breakfast', label: 'breakfast Aug 29' });\n    if (attendance.day2Lunch) events.push({ day: 2, event: 'lunch', label: 'lunch Aug 29' });\n    if (attendance.day2Dinner) events.push({ day: 2, event: 'dinner', label: 'dinner Aug 29' });\n    if (attendance.day2Night) events.push({ day: 2, event: 'overnight', label: 'overnight Aug 29-30' });\n    \n    if (attendance.day3Breakfast) events.push({ day: 3, event: 'breakfast', label: 'breakfast Aug 30' });\n    if (attendance.day3Lunch) events.push({ day: 3, event: 'lunch', label: 'lunch Aug 30' });\n    if (attendance.day3Dinner) events.push({ day: 3, event: 'dinner', label: 'dinner Aug 30' });\n    \n    if (events.length === 0) return [];\n    \n    const periods = [];\n    let currentPeriod = null;\n    \n    for (let i = 0; i < events.length; i++) {\n      if (!currentPeriod) {\n        currentPeriod = { start: events[i], end: events[i] };\n      } else {\n        const prevEvent = events[i - 1];\n        const currentEvent = events[i];\n        \n        const isContinuous = (\n          (prevEvent.day === currentEvent.day) || \n          (prevEvent.day === currentEvent.day - 1 && prevEvent.event === 'overnight') ||\n          (prevEvent.day === currentEvent.day - 1 && currentEvent.event === 'breakfast')\n        );\n        \n        if (isContinuous) {\n          currentPeriod.end = currentEvent;\n        } else {\n          periods.push(currentPeriod);\n          currentPeriod = { start: currentEvent, end: currentEvent };\n        }\n      }\n    }\n    \n    if (currentPeriod) {\n      periods.push(currentPeriod);\n    }\n    \n    return periods.map(period => {\n      if (period.start.label === period.end.label) {\n        return period.start.label;\n      } else {\n        return `from ${period.start.label} to ${period.end.label}`;\n      }\n    });\n  };\n\n  const getUserRideInfo = () => {\n    const offeringRide = rides.find((ride: any) => ride.driverId === user.id);\n    if (offeringRide) {\n      return {\n        type: \"offering\",\n        title: `Offering ride: ${offeringRide.departure} → ${offeringRide.destination}`,\n        details: [\n          `Day: ${offeringRide.eventDay === 'day1' ? 'Aug 28' : offeringRide.eventDay === 'day2' ? 'Aug 29' : 'Aug 30'}`,\n          `Departure: ${offeringRide.departureTime}`,\n          `Available seats: ${offeringRide.availableSeats}/${offeringRide.totalSeats}`\n        ],\n        color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\"\n      };\n    }\n\n    const requestingRide = requests.find((request: any) => request.requesterId === user.id);\n    if (requestingRide) {\n      return {\n        type: \"requesting\",\n        title: `Requesting ride: ${requestingRide.departure} → ${requestingRide.destination}`,\n        details: [\n          `Day: ${requestingRide.eventDay === 'day1' ? 'Aug 28' : requestingRide.eventDay === 'day2' ? 'Aug 29' : 'Aug 30'}`,\n          `Preferred time: ${requestingRide.preferredTime}`,\n          `Status: ${requestingRide.status}`\n        ],\n        color: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\"\n      };\n    }\n\n    return null;\n  };\n\n  const getDietaryStatus = () => {\n    if (!attendance) return 'Not specified';\n    const preferences = [];\n    if (attendance.omnivore) preferences.push('Omnivore');\n    if (attendance.vegetarian) preferences.push('Vegetarian');\n    if (attendance.vegan) preferences.push('Vegan');\n    if (attendance.glutenFree) preferences.push('Gluten-free');\n    if (attendance.dairyFree) preferences.push('Dairy-free');\n    if (attendance.allergies) preferences.push(`Allergies: ${attendance.allergies}`);\n    \n    if (preferences.length === 0) {\n      preferences.push('Vegan');\n    }\n    \n    return preferences.join(', ');\n  };\n\n  const attendancePeriods = getAttendancePeriods();\n  const rideInfo = getUserRideInfo();\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n      <div className=\"mb-6\">\n        <Button \n          onClick={() => onNavigate('dashboard')} \n          variant=\"outline\"\n          className=\"mb-4\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Dashboard\n        </Button>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"h-16 w-16 bg-primary rounded-full flex items-center justify-center logo-style\">\n            <span className=\"text-2xl font-bold text-white\">\n              {user.username.charAt(0).toUpperCase()}\n            </span>\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white logo-style\">\n              {user.username}\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              {user.isAdmin ? 'Event Administrator' : 'Participant'}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Contact Information */}\n        <Card className=\"card-elevated\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Users className=\"h-5 w-5 mr-2\" />\n              Contact Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {user.email && (\n              <div className=\"flex items-center text-sm\">\n                <Mail className=\"h-4 w-4 mr-2\" />\n                <span>{user.email}</span>\n              </div>\n            )}\n            {user.phone && (\n              <div className=\"flex items-center text-sm\">\n                <Phone className=\"h-4 w-4 mr-2\" />\n                <span>{user.phone}</span>\n              </div>\n            )}\n            {!user.email && !user.phone && (\n              <p className=\"text-gray-500 dark:text-gray-400 text-sm\">\n                No contact information provided\n              </p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Attendance Status */}\n        <Card className=\"card-elevated\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Calendar className=\"h-5 w-5 mr-2\" />\n              Attendance Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {attendancePeriods.length > 0 ? (\n              <div className=\"space-y-2\">\n                {attendancePeriods.map((period, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"mr-2 mb-2\">\n                    {period}\n                  </Badge>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-gray-500 dark:text-gray-400 text-sm\">\n                No attendance registered\n              </p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Dietary Preferences */}\n        <Card className=\"card-elevated\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Utensils className=\"h-5 w-5 mr-2\" />\n              Dietary Preferences\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n              {getDietaryStatus()}\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Ride Coordination */}\n        <Card className=\"card-elevated\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Car className=\"h-5 w-5 mr-2\" />\n              Ride Coordination\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {rideInfo ? (\n              <div className=\"space-y-2\">\n                <Badge className={rideInfo.color}>\n                  {rideInfo.title}\n                </Badge>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400 space-y-1\">\n                  {rideInfo.details.map((detail, index) => (\n                    <div key={index}>{detail}</div>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <p className=\"text-gray-500 dark:text-gray-400 text-sm\">\n                No ride coordination\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11019}}}